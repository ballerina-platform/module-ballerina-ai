{
  "openapi": "3.0.1",
  "info": {
    "title": "Alfresco Content Services REST API",
    "description": "This is a generated connector for [Alfresco API](https://docs.alfresco.com/content-services) OpenAPI Specification.\nThe Alfresco REST API enable you to access to the core features of Alfresco Content Services.\n",
    "x-ballerina-init-description": "The connector initialization requires setting the API credentials. \nPlease create a [Alfresco devoloper account](https://www.alfresco.com/try-alfresco) and [obtain tokens](https://docs.alfresco.com/process-services/1.10/config/authenticate/).\n",
    "x-ballerina-display": {
      "label": "Alfresco",
      "iconPath": "icon.png"
    },
    "version": "1"
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "audit",
      "description": "Retrieve and clear audit entries"
    },
    {
      "name": "actions",
      "description": "Retrieve and execute actions"
    },
    {
      "name": "activities",
      "description": "Retrieve and manage activities"
    },
    {
      "name": "comments",
      "description": "Retrieve and manage comments"
    },
    {
      "name": "downloads",
      "description": "Create and manage downloads"
    },
    {
      "name": "favorites",
      "description": "Retrieve and manage favorites"
    },
    {
      "name": "networks",
      "description": "Retrieve and manage networks"
    },
    {
      "name": "nodes",
      "description": "Retrieve and manage nodes"
    },
    {
      "name": "people",
      "description": "Retrieve and manage people"
    },
    {
      "name": "groups",
      "description": "Retrieve and manage groups"
    },
    {
      "name": "preferences",
      "description": "Retrieve and manage preferences"
    },
    {
      "name": "probes",
      "description": "Check readiness and liveness of the repository"
    },
    {
      "name": "queries",
      "description": "Find nodes, sites, and people using a simple search term"
    },
    {
      "name": "ratings",
      "description": "Retrieve and manage ratings"
    },
    {
      "name": "renditions",
      "description": "Retrieve and manage file renditions"
    },
    {
      "name": "shared-links",
      "description": "Retrieve and manage public shared links"
    },
    {
      "name": "sites",
      "description": "Retrieve and manage sites"
    },
    {
      "name": "tags",
      "description": "Retrieve and manage tags"
    },
    {
      "name": "trashcan",
      "description": "Retrieve and manage deleted nodes"
    },
    {
      "name": "versions",
      "description": "Retrieve and manage versions"
    }
  ],
  "paths": {
    "/nodes/{nodeId}/comments": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "List comments",
        "description": "Gets a list of comments for the node **nodeId**, sorted chronologically with the newest comment first.",
        "operationId": "listComments",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** exists but does not identify a file or a folder,\nor the value of **maxItems** is invalid, or the value of **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission read comments on the node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Create a comment",
        "description": "Creates a comment on node **nodeId**. You specify the comment in a JSON body like this:\n\n```JSON\n{\n  \"content\": \"This is a comment\"\n}\n```\n\n**Note:** You can create more than one comment by\nspecifying a list of comments in the JSON body like this:\n\n```JSON\n[\n  {\n    \"content\": \"This is a comment\"\n  },\n  {\n    \"content\": \"This is another comment\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createComment",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The comment text. Note that you can also provide a list of comments.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **commentBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to create a comment",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "405": {
            "description": "Cannot comment on a node of this type",
            "content": {}
          },
          "409": {
            "description": "**nodeId** is locked and you are not the lock owner\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "commentBodyCreate"
      }
    },
    "/nodes/{nodeId}/comments/{commentId}": {
      "put": {
        "tags": [
          "comments"
        ],
        "summary": "Update a comment",
        "description": "Updates an existing comment **commentId** on node **nodeId**.",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The identifier of a comment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The JSON representing the comment to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **commentBodyUpdate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to update a comment",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **commentId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "**nodeId** is locked and you are not the lock owner\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "commentBodyUpdate"
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete a comment",
        "description": "Deletes the comment **commentId** from node **nodeId**.",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The identifier of a comment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to delete a comment",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **commentId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "**nodeId** is locked and you are not the lock owner\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}/ratings": {
      "get": {
        "tags": [
          "ratings"
        ],
        "summary": "List ratings",
        "description": "Gets a list of ratings for node **nodeId**.",
        "operationId": "listRatings",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ratings"
        ],
        "summary": "Create a rating",
        "description": "Create a rating for the node with identifier **nodeId**",
        "operationId": "createRating",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "For \"myRating\" the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.\n\nFor example, to \"like\" a file the following body would be used:\n\n```JSON\n  {\n    \"id\": \"likes\",\n    \"myRating\": true\n  }\n```\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **ratingBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "405": {
            "description": "Cannot rate a node of this type",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "ratingBodyCreate"
      }
    },
    "/nodes/{nodeId}/ratings/{ratingId}": {
      "get": {
        "tags": [
          "ratings"
        ],
        "summary": "Get a rating",
        "description": "Get the specific rating **ratingId** on node **nodeId**.",
        "operationId": "getRating",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "The identifier of a rating.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: unknown rating scheme specified\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ratings"
        ],
        "summary": "Delete a rating",
        "description": "Deletes rating **ratingId** from node **nodeId**.",
        "operationId": "deleteRating",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ratingId",
            "in": "path",
            "description": "The identifier of a rating.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: unknown rating scheme specified\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List tags for a node",
        "description": "Gets a list of tags for node **nodeId**.",
        "operationId": "listTagsForNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to read tags on the node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tags"
        ],
        "summary": "Create a tag for a node",
        "description": "Creates a tag on the node **nodeId**. You specify the tag in a JSON body like this:\n\n```JSON\n{\n  \"tag\":\"test-tag-1\"\n}\n```\n\n**Note:** You can create more than one tag by\nspecifying a list of tags in the JSON body like this:\n\n```JSON\n[\n  {\n    \"tag\":\"test-tag-1\"\n  },\n  {\n    \"tag\":\"test-tag-2\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n         ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createTagForNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The new tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **tagBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to create tags on the node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "405": {
            "description": "Cannot tag a node of this type",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tagBodyCreate"
      }
    },
    "/nodes/{nodeId}/tags/{tagId}": {
      "delete": {
        "tags": [
          "tags"
        ],
        "summary": "Delete a tag from a node",
        "description": "Deletes tag **tagId** from node **nodeId**.",
        "operationId": "deleteTagFromNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of a tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to delete the tag",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **tagId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{nodeId}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGet information for node **nodeId**.\n\nYou can use the **include** parameter to return additional information.\n",
        "operationId": "getNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relativePath",
            "in": "query",
            "description": "A path relative to the **nodeId**. If you set this,\ninformation is returned on the node resolved by this path.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to retrieve **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "put": {
        "tags": [
          "nodes"
        ],
        "summary": "Update a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdates the node **nodeId**. For example, you can rename a file or folder:\n```JSON\n{\n  \"name\":\"My new name\"\n}\n```\nYou can also set or update one or more properties:\n```JSON\n{\n  \"properties\":\n  {\n    \"cm:title\":\"Folder title\"\n  }\n}\n```\nYou can update multi-value properties of a node which supports properties of type multiple.\n ```JSON\n{\n  \"name\":\"My Other Folder\",\n  \"nodeType\":\"custom:destination\",\n  \"properties\":\n  {\n    \"cm:title\":\"Folder title\",\n    \"cm:description\":\"This is an important folder\",\n    \"custom:locations\": [\n                         \"location NewX\",\n                         \"location NewY\"\n                        ]\n  }\n}\n```\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n**Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.\n\nYou can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.\nYou can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:\n```JSON\n{\n  \"permissions\":\n    {\n      \"isInheritanceEnabled\": false,\n      \"locallySet\":\n        [\n          {\"authorityId\": \"GROUP_special\", \"name\": \"Read\", \"accessStatus\":\"DENIED\"},\n          {\"authorityId\": \"testuser\", \"name\": \"Contributor\", \"accessStatus\":\"ALLOWED\"}\n        ]\n    }\n}\n```\n**Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.\n\n**Note:** Currently there is no optimistic locking for updates, so they are applied in \"last one wins\" order.\n",
        "operationId": "updateNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The node information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: the update request is invalid or **nodeId** is not a valid format or **nodeBodyUpdate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Updated name clashes with an existing node in the current parent folder",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception including a file name containing invalid characters",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "nodeBodyUpdate"
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Delete a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the node **nodeId**.\n\nIf **nodeId** is a folder, then its children are also deleted.\n\nDeleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.\n\nDeleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted\nnode is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.\n\n**Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary\nchild association is restored. This applies recursively for any primary children. No other secondary child associations or\npeer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original\nassociations were to nodes inside or outside the restored hierarchy.\n",
        "operationId": "deleteNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "If **true** then the node is deleted permanently, without moving to the trashcan.\nOnly the owner of the node or an admin can permanently delete the node.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "**nodeId** is locked and cannot be deleted\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "List node children",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of children of the parent node **nodeId**.\n\nMinimal information for each child is returned by default.\n\nYou can use the **include** parameter to return additional information.\n\nThe list of child nodes includes primary children and secondary children, if there are any.\n\nYou can use the **include** parameter (include=association) to return child association details\nfor each child, including the **assocTyp**e and the **isPrimary** flag.\n\nThe default sort order for the returned list is for folders to be sorted before files, and by ascending name.\n\nYou can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but\nyou can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.\n\nFor example, specifying ```orderBy=name DESC``` returns a mixed folder/file list in descending **name** order.\n\nYou can use any of the following fields to order the results:\n* isFolder\n* name\n* mimeType\n* nodeType\n* sizeInBytes\n* modifiedAt\n* createdAt\n* modifiedByUser\n* createdByUser\n",
        "operationId": "listNodeChildren",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list. Here are some examples:\n\n*   ```where=(isFolder=true)```\n\n*   ```where=(isFile=true)```\n\n*   ```where=(nodeType='my:specialNodeType')```\n\n*   ```where=(nodeType='my:specialNodeType INCLUDESUBTYPES')```\n\n*   ```where=(isPrimary=true)```\n\n*   ```where=(assocType='my:specialAssocType')```\n\n*   ```where=(isPrimary=false and assocType='my:specialAssocType')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n* permissions\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relativePath",
            "in": "query",
            "description": "Return information on children in the folder resolved by this path. The path is relative to **nodeId**.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSource",
            "in": "query",
            "description": "Also include **source** in addition to **entries** with folder information on the parent node â€“ either the specified parent **nodeId**, or as resolved by **relativePath**.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeChildAssociationPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, **nodeId** is not a folder or **orderBy** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to retrieve children of **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Create a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a node and add it as a primary child of node **nodeId**.\n\nThis endpoint supports both JSON and multipart/form-data (file upload).\n\n**Using multipart/form-data**\n\nUse the **filedata** field to represent the content to upload, for example, the following curl command will\ncreate a node with the contents of test.txt in the test user's home folder.\n\n```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt```\n\nYou can use the **name** field to give an alternative name for the new file.\n\nYou can use the **nodeType** field to create a specific type. The default is cm:content.\n\nYou can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.\nAlso, as requesting rendition is a background process,\nany rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.\n\nUse **overwrite** to overwrite an existing file, matched by name. If the file is versionable,\nthe existing content is replaced.\n\nWhen you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version\nshould be created. The default for **majorVersion** is **false**.\nSetting  **majorVersion** enables versioning of the node, if it is not already versioned.\n\nWhen you overwrite existing content, you can use the **comment** field to add a version comment that appears in the\nversion history. This also enables versioning of this node, if it is not already versioned.\n\nYou can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then\nthe API method tries to create a unique name using an integer suffix.\n\nYou can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.\nFolders in the **relativePath** that do not exist are created before the node is created.\n\nAny other field provided will be treated as a property to set on the newly created node.\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\n**Note:** When creating a new node using multipart/form-data by default versioning is enabled and set to MAJOR Version.\nSince Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.\n\n| **versioningEnabled** | **majorVersion** | **Version Type** |\n|-----------------------|------------------|------------------|\n|        unset          |        unset     |    MAJOR         |\n|        unset          |        true      |    MAJOR         |\n|        unset          |        false     |    MINOR         |\n|        true           |        unset     |    MAJOR         |\n|        true           |        true      |    MAJOR         |\n|        true           |        false     |    MINOR         |\n|        false          |        true      |    Unversioned   |\n|        false          |        false     |    Unversioned   |\n|        false          |        true      |    Unversioned   |\n<br>\n\n**Using JSON**\n\nYou must specify at least a **name** and **nodeType**. For example, to create a folder:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"nodeType\":\"cm:folder\"\n}\n```\n\nYou can create an empty file like this:\n```JSON\n{\n  \"name\":\"My text file.txt\",\n  \"nodeType\":\"cm:content\"\n}\n```\nYou can update binary content using the ```PUT /nodes/{nodeId}``` API method.\n\nYou can create a folder, or other node, inside a folder hierarchy:\n```JSON\n{\n  \"name\":\"My Special Folder\",\n  \"nodeType\":\"cm:folder\",\n  \"relativePath\":\"X/Y/Z\"\n}\n```\nThe **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the\n**relativePath** that do not exist are created before the node is created.\n\nYou can set properties when you create a new node:\n```JSON\n{\n  \"name\":\"My Other Folder\",\n  \"nodeType\":\"cm:folder\",\n  \"properties\":\n  {\n    \"cm:title\":\"Folder title\",\n    \"cm:description\":\"This is an important folder\"\n  }\n}\n```\n\nYou can set multi-value properties when you create a new node which supports properties of type multiple.\n ```JSON\n{\n  \"name\":\"My Other Folder\",\n  \"nodeType\":\"custom:destination\",\n  \"properties\":\n  {\n    \"cm:title\":\"Folder title\",\n    \"cm:description\":\"This is an important folder\",\n    \"custom:locations\": [\n                         \"location X\",\n                         \"location Y\"\n                        ]\n  }\n}\n```\n\nAny missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects\nexplicitly, if needed, using an **aspectNames** field.\n\n**Note:** setting properties of type d:content and d:category are not supported.\n\nYou can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:\n```JSON\n{\n  \"permissions\":\n    {\n      \"isInheritanceEnabled\": false,\n      \"locallySet\":\n        [\n          {\"authorityId\": \"GROUP_special\", \"name\": \"Read\", \"accessStatus\":\"DENIED\"},\n          {\"authorityId\": \"testuser\", \"name\": \"Contributor\", \"accessStatus\":\"ALLOWED\"}\n        ]\n    }\n}\n```\n\nTypically, for files and folders, the primary children are created within the parent folder using the default \"cm:contains\" assocType.\nIf the content model allows then it is also possible to create primary children with a different assoc type. For example:\n```JSON\n{\n  \"name\":\"My Node\",\n  \"nodeType\":\"my:specialNodeType\",\n  \"association\":\n  {\n    \"assocType\":\"my:specialAssocType\"\n  }\n}\n```\n\nAdditional associations can be added after creating a node. You can also add associations at the time the node is created. This is\nrequired, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally\nspecify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.\nYou can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.\nFor example, to associate one or more secondary children at time of creation:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"nodeType\":\"cm:folder\",\n  \"secondaryChildren\":\n    [ {\"childId\":\"abcde-01234-...\", \"assocType\":\"my:specialChildAssocType\"} ]\n}\n```\nFor example, to associate one or more targets at time of creation:\n```JSON\n{\n  \"name\":\"My Folder\",\n  \"nodeType\":\"cm:folder\",\n  \"targets\":\n    [ {\"targetId\":\"abcde-01234-...\", \"assocType\":\"my:specialPeerAssocType\"} ]\n}\n```\n\n**Note:** You can create more than one child by\nspecifying a list of nodes in the JSON body. For example, the following JSON\nbody creates two folders inside the specified **nodeId**, if the **nodeId** identifies\na folder:\n\n```JSON\n[\n  {\n    \"name\":\"My Folder 1\",\n    \"nodeType\":\"cm:folder\"\n  },\n  {\n    \"name\":\"My Folder 2\",\n    \"nodeType\":\"cm:folder\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n**Note:** When creating a new node using JSON by default versioning is disabled.\nSince Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.\n\n| **versioningEnabled** | **majorVersion** | **Version Type** |\n|-----------------------|------------------|------------------|\n|        unset          |        unset     |    Unversioned   |\n|        unset          |        true      |    MAJOR         |\n|        unset          |        false     |    MINOR         |\n|        true           |        unset     |    MAJOR         |\n|        true           |        true      |    MAJOR         |\n|        true           |        false     |    MINOR         |\n|        false          |        true      |    Unversioned   |\n|        false          |        false     |    Unversioned   |\n|        false          |        true      |    Unversioned   |\n<br>\n",
        "operationId": "createNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "autoRename",
            "in": "query",
            "description": "If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "majorVersion",
            "in": "query",
            "description": "If true, then created node will be version *1.0 MAJOR*. If false, then created node will be version *0.1 MINOR*.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "versioningEnabled",
            "in": "query",
            "description": "If true, then created node will be versioned. If false, then created node will be unversioned and auto-versioning disabled.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The node information to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format or **nodeBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to create children of **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "New name clashes with an existing node in the current parent folder",
            "content": {}
          },
          "413": {
            "description": "Content exceeds individual file size limit configured for the network or system",
            "content": {}
          },
          "415": {
            "description": "Content Type is not supported",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception including a file name containing invalid characters",
            "content": {}
          },
          "507": {
            "description": "Content exceeds overall storage quota limit configured for the network or system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "nodeBodyCreate"
      }
    },
    "/nodes/{nodeId}/copy": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Copy a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCopies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.\n\nThe new node has the same name as the source node unless you specify a new **name** in the request body.\n\nIf the source **nodeId** is a folder, then all of its children are also copied.\n\nIf the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.\n",
        "operationId": "copyNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The targetParentId and, optionally, a new name which should include the fileÂ extension.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyCopy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format or **nodeBodyCopy** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to copy **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "New name clashes with an existing node in the destination parent folder",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception including a file name containing invalid characters",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "nodeBodyCopy"
      }
    },
    "/nodes/{nodeId}/lock": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Lock a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nPlaces a lock on node **nodeId**.\n\n**Note:** you can only lock files. More specifically, a node can only be locked if it is\nof type `cm:content` or a subtype of `cm:content`.\n\nThe lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.\n\nIf the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.\n\nWhen a lock expires, the lock is released.\n\nIf the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.\n\nBy default, a lock is applied that allows the owner to update or delete the node.\nYou can use **type** to change the lock type to one of the following:\n* **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API. This is the default value.\n* **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.\n\nBy default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.\nYou might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need\nto be kept over a restart of the repository. In this case you don't need the\noverhead of writing the locks to the database.\n\nIf a lock on the node cannot be taken, then an error is returned.\n",
        "operationId": "lockNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Lock details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyLock"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or **nodeBodyLock** is invalid,\nor a lock was attempted on a node that is not a file\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to lock **nodeId**\n",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "**nodeId** could not be locked\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "nodeBodyLock"
      }
    },
    "/nodes/{nodeId}/unlock": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Unlock a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes a lock on node **nodeId**.\n\nThe current user must be the owner of the locks or have admin rights, otherwise an error is returned.\n\nIf a lock on the node cannot be released, then an error is returned.\n",
        "operationId": "unlockNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to unlock **nodeId**\n",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "**nodeId** could not be unlocked\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/move": {
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Move a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nMove the node **nodeId** to the parent folder node **targetParentId**.\n\nThe **targetParentId** is specified in the in request body.\n\nThe moved node retains its name unless you specify a new **name** in the request body.\n\nIf the source **nodeId** is a folder, then its children are also moved.\n\nThe move will effectively change the primary parent.\n",
        "operationId": "moveNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The targetParentId and, optionally, a new name which should include the fileÂ extension.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeBodyMove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or **targetParentId** is not a folder,\nor **nodeBodyMove** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to move **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "New name clashes with an existing node in the destination parent folder",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception including a file name containing invalid characters",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "nodeBodyMove"
      }
    },
    "/nodes/{nodeId}/content": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Get node content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the content of the node with identifier **nodeId**.\n",
        "operationId": "getNodeContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to retrieve content of **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "put": {
        "tags": [
          "nodes"
        ],
        "summary": "Update node content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdates the content of the node with identifier **nodeId**.\n\nThe request body for this endpoint can be any text or binary stream.\n\nThe **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,\na new minor version is created by default.\n\nOptionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this\nwill rename the node. If invalid then an error is returned and the content is not updated.\n\n**Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.\nThis is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for\ntooling to accept an arbitrary file.\n",
        "operationId": "updateNodeContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "majorVersion",
            "in": "query",
            "description": "If **true**, create a major version.\nSetting this parameter also enables versioning of this node, if it is not already versioned.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Add a version comment which will appear in version history.\nSetting this parameter also enables versioning of this node, if it is not already versioned.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional new name. This should include the fileÂ extension.\nThe name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character `.` must not be used at the end of the name.\n",
            "schema": {
              "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The binary content",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Optional new name clashes with an existing node in the current parent folder",
            "content": {}
          },
          "413": {
            "description": "Content exceeds individual file size limit (configured for network/system)",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception including a file name containing invalid characters",
            "content": {}
          },
          "507": {
            "description": "Content exceeds overall storage quota limit configured for the network/system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "contentBodyUpdate"
      }
    },
    "/nodes/{nodeId}/renditions": {
      "get": {
        "tags": [
          "renditions"
        ],
        "summary": "List renditions",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.\n\nEachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.\n\nYou can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**\nclause will return just the CREATED renditions:\n\n```\n(status='CREATED')\n```\n",
        "operationId": "listRenditions",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "renditions"
        ],
        "summary": "Create rendition",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nAn asynchronous request to create a rendition for file **nodeId**.\n\nThe rendition is specified by name **id** in the request body:\n```JSON\n{\n  \"id\":\"doclib\"\n}\n```\n Multiple names may be specified as a comma separated list or using a list format:\n```JSON\n[\n  {\n     \"id\": \"doclib\"\n  },\n  {\n     \"id\": \"avatar\"\n  }\n]\n```\n",
        "operationId": "createRendition",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rendition \"id\".",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenditionBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Request accepted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format or is not a file\nor **renditionBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "All requested renditions already exist",
            "content": {}
          },
          "501": {
            "description": "Renditions/thumbnails are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "renditionBodyCreate"
      }
    },
    "/nodes/{nodeId}/renditions/{renditionId}": {
      "get": {
        "tags": [
          "renditions"
        ],
        "summary": "Get rendition information",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition information for **renditionId** of file **nodeId**.\n",
        "operationId": "getRendition",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/renditions/{renditionId}/content": {
      "get": {
        "tags": [
          "renditions"
        ],
        "summary": "Get rendition content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition content for **renditionId** of file **nodeId**.\n",
        "operationId": "getRenditionContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "placeholder",
            "in": "query",
            "description": "If **true** and there is no rendition for this **nodeId** and **renditionId**,\nthen the placeholder image for the mime type of this rendition is returned, rather\nthan a 404 response.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/secondary-children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "List secondary children",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.\n",
        "operationId": "listSecondaryChildren",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a parent node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list by assocType. Here's an example:\n\n*   ```where=(assocType='my:specialAssocType')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "includeSource",
            "in": "query",
            "description": "Also include **source** (in addition to **entries**) with folder information on **nodeId**",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeChildAssociationPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Parent **nodeId** does not exist",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Create secondary child",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a secondary child association, with the given association type, between the parent **nodeId** and a child node.\n\n**Note:** You can create more than one secondary child association by\nspecifying a list of associations in the JSON body like this:\n\n```JSON\n[\n  {\n    \"childId\": \"string\",\n    \"assocType\": \"string\"\n  },\n  {\n    \"childId\": \"string\",\n    \"assocType\": \"string\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createSecondaryChildAssociation",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a parent node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The child node id and assoc type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChildAssociationBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChildAssociationEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,\nor **secondaryChildAssociationBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to create secondary children of **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Parent **nodeId** or **childId** does not exist",
            "content": {}
          },
          "409": {
            "description": "An association of this assoc type already exists between these two nodes",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "secondaryChildAssociationBodyCreate"
      }
    },
    "/nodes/{nodeId}/secondary-children/{childId}": {
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Delete secondary child or children",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete secondary child associations between the parent **nodeId** and child nodes for the given association type.\n\nIf the association type is **not** specified, then all secondary child associations, of any type in the direction\nfrom parent to secondary child, will be deleted. The child will still have a primary parent and may still be\nassociated as a secondary child with other secondary parents.\n",
        "operationId": "deleteSecondaryChildAssociation",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a parent node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "childId",
            "in": "path",
            "description": "The identifier of a child node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assocType",
            "in": "query",
            "description": "Only delete associations of this type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown or you are trying to delete a primary **assocType**.\nUse delete node instead\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Parent **nodeId** or **childId** does not exist (with given assocType, if specified)",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/parents": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "List parents",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of parent nodes that are associated with the current child **nodeId**.\n\nThe list includes both the primary parent and any secondary parents.\n",
        "operationId": "listParents",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a child node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list by **assocType** and/or **isPrimary**. Here are some example filters:\n\n*   ```where=(assocType='my:specialAssocType')```\n\n*   ```where=(isPrimary=true)```\n\n*   ```where=(isPrimary=false and assocType='my:specialAssocType')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "includeSource",
            "in": "query",
            "description": "Also include **source** (in addition to **entries**) with folder information on **nodeId**",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAssociationPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Child **nodeId** does not exist",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/targets": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "List target associations",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of target nodes that are associated with the current source **nodeId**.\n",
        "operationId": "listTargetAssociations",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a source node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list by **assocType**. Here's an example:\n\n*   ```where=(assocType='my:specialAssocType')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAssociationPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown or the **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Source **nodeId** does not exist",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Create node association",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate an association, with the given association type, between the source **nodeId** and a target node.\n\n**Note:** You can create more than one association by\nspecifying a list of associations in the JSON body like this:\n\n```JSON\n[\n  {\n     \"targetId\": \"string\",\n     \"assocType\": \"string\"\n  },\n  {\n    \"targetId\": \"string\",\n    \"assocType\": \"string\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createAssociation",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a source node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The target node id and assoc type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociationBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format,\nor **associationBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Source **nodeId** or **targetId** does not exist",
            "content": {}
          },
          "409": {
            "description": "An association of this assoc type already exists between these two nodes",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "associationBodyCreate"
      }
    },
    "/nodes/{nodeId}/targets/{targetId}": {
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Delete node association(s)",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete an association, or associations, from the source **nodeId* to a target node for the given association type.\n\nIf the association type is **not** specified, then all peer associations, of any type, in the direction\nfrom source to target, are deleted.\n\n**Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations\nin the other direction.\n",
        "operationId": "deleteAssociation",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a source node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The identifier of a target node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assocType",
            "in": "query",
            "description": "Only delete associations of this type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **assocType** is unknown, or the **nodeId** is not a valid format, or **targetId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Source **nodeId** or **targetId** does not exist (with given assocType, if specified)",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/sources": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "List source associations",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of source nodes that are associated with the current target **nodeId**.\n",
        "operationId": "listSourceAssociations",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a target node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list by **assocType**. Here's an example:\n\n*   ```where=(assocType='my:specialAssocType')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAssociationPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format or **assocType** is unknown\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Target **nodeId** does not exist",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/versions": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "List version history",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version history as an ordered list of versions for the specified **nodeId**.\n\nThe list is ordered in descending modified order. So the most recent version is first and\nthe original version is last in the list.\n",
        "operationId": "listVersionHistory",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the version node. The following optional fields can be requested:\n* properties\n* aspectNames\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "Target **nodeId** does not exist",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get version information",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version information for **versionId** of file node **nodeId**.\n",
        "operationId": "getVersion",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or it exists but does not identify a file, or **versionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "delete": {
        "tags": [
          "versions"
        ],
        "summary": "Delete a version",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDelete the version identified by **versionId** and **nodeId*.\n\nIf the version is successfully deleted then the content and metadata for that versioned node\nwill be deleted and will no longer appear in the version history. This operation cannot be undone.\n\nIf the most recent version is deleted the live node will revert to the next most recent version.\n\nWe currently do not allow the last version to be deleted. If you wish to clear the history then you\ncan remove the \"cm:versionable\" aspect (via update node) which will also disable versioning. In this\ncase, you can re-enable versioning by adding back the \"cm:versionable\" aspect or using the version\nparams (majorVersion and comment) on a subsequent file content update.\n",
        "operationId": "deleteVersion",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or exists but does not identify a file, or **versionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete the versioned node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Cannot delete the last remaining version",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}/content": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get version content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the version content for **versionId** of file node **nodeId**.\n",
        "operationId": "getVersionContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}/revert": {
      "post": {
        "tags": [
          "versions"
        ],
        "summary": "Revert a version",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nAttempts to revert the version identified by **versionId** and **nodeId** to the live node.\n\nIf the node is successfully reverted then the content and metadata for that versioned node\nwill be promoted to the live node and a new version will appear in the version history.\n",
        "operationId": "revertVersion",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Optionally, specify a version comment and whether this should be a major version, or not.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or it exists\nbut does not identify a file, or **versionId** is invalid,\nor **revertBody** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to revert the versioned node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception trying to revert the node",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "revertBody"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}/renditions": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "List renditions for a file version",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets a list of the rendition information for each rendition of the version of file **nodeId** and **versionId**, including the rendition id.\n\nEachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.\n\nYou can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**\nclause will return just the CREATED renditions:\n\n```\n(status='CREATED')\n```\n",
        "operationId": "listVersionRenditions",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "7.0.0"
      },
      "post": {
        "tags": [
          "versions"
        ],
        "summary": "Create rendition for a file version",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nAn asynchronous request to create a rendition for version of file **nodeId** and **versionId**.\n\nThe version rendition is specified by name **id** in the request body:\n```JSON\n{\n  \"id\":\"doclib\"\n}\n```\n  Multiple names may be specified as a comma separated list or using a list format:\n```JSON\n[\n  {\n      \"id\": \"doclib\"\n  },\n  {\n      \"id\": \"avatar\"\n  }\n]\n```\n",
        "operationId": "createVersionRendition",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The rendition \"id\".",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenditionBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Request accepted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid,\nor **renditionBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** or **renditionId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "All requested renditions already exist",
            "content": {}
          },
          "501": {
            "description": "Renditions/thumbnails are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "7.0.0",
        "x-codegen-request-body-name": "renditionBodyCreate"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get rendition information for a file version",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets the rendition information for **renditionId** of version of file **nodeId** and **versionId**.\n",
        "operationId": "getVersionRendition",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** or **renditionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "7.0.0"
      }
    },
    "/nodes/{nodeId}/versions/{versionId}/renditions/{renditionId}/content": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "Get rendition content for a file version",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets the rendition content for **renditionId** of version of file **nodeId** and **versionId**.\n",
        "operationId": "getVersionRenditionContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The identifier of a version, ie. version label, within the version history of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "placeholder",
            "in": "query",
            "description": "If **true** and there is no rendition for this **nodeId** and **renditionId**,\nthen the placeholder image for the mime type of this rendition is returned, rather\nthan a 404 response.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **versionId** is invalid, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **versionId** or **renditionId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "7.0.0"
      }
    },
    "/nodes/{nodeId}/action-definitions": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "Retrieve actions for a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nRetrieve the list of actions that may be executed against the given **nodeId**.\n\nThe default sort order for the returned list is for actions to be sorted by ascending name.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* name\n* title\n",
        "operationId": "nodeActions",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDefinitionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/deleted-nodes": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "List deleted nodes",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of deleted nodes for the current user.\n\nIf the current user is an administrator deleted nodes for all users will be returned.\n\nThe list of deleted nodes will be ordered with the most recently deleted node at the top of the list.\n",
        "operationId": "listDeletedNodes",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n* permissions\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedNodesPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/deleted-nodes/{nodeId}": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "Get a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the specific deleted node **nodeId**.\n",
        "operationId": "getDeletedNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedNodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to view the deleted node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "delete": {
        "tags": [
          "trashcan"
        ],
        "summary": "Permanently delete a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nPermanently deletes the deleted node **nodeId**.\n",
        "operationId": "deleteDeletedNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to permanently delete the deleted node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/deleted-nodes/{nodeId}/content": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "Get deleted node content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the content of the deleted node with identifier **nodeId**.\n",
        "operationId": "getDeletedNodeContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to retrieve content of **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/deleted-nodes/{nodeId}/restore": {
      "post": {
        "tags": [
          "trashcan"
        ],
        "summary": "Restore a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nAttempts to restore the deleted node **nodeId** to its original location or to a new location.\n\nIf the node is successfully restored to its former primary parent, then only the\nprimary child association will be restored, including recursively for any primary\nchildren. It should be noted that no other secondary child associations or peer\nassociations will be restored, for any of the nodes within the primary parent-child\nhierarchy of restored nodes, irrespective of whether these associations were to\nnodes within or outside of the restored hierarchy.\n\nAlso, any previously shared link will not be restored since it is deleted at the time\nof delete of each node.\n",
        "operationId": "restoreDeletedNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The targetParentId if the node is restored to a new location.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletedNodeBodyRestore"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** or **targetNodeId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to restore the deleted node or user does not have permission to the target node",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist or the restore destination parent node does not exists\n",
            "content": {}
          },
          "409": {
            "description": "Node name already exists in the restore destination",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception trying to restore the node",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "deletedNodeBodyRestore"
      }
    },
    "/deleted-nodes/{nodeId}/renditions": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "List renditions for a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.\n\nEachÂ rendition returned has a **status**: CREATED means it is availableÂ to view or download, NOT_CREATED means the rendition can be requested.\n\nYou can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**\nclause will return just the CREATED renditions:\n\n```\n(status='CREATED')\n```\n",
        "operationId": "listDeletedNodeRenditions",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, is not a file, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/deleted-nodes/{nodeId}/renditions/{renditionId}": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "Get rendition information for a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition information for **renditionId** of file **nodeId**.\n",
        "operationId": "getArchivedNodeRendition",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/deleted-nodes/{nodeId}/renditions/{renditionId}/content": {
      "get": {
        "tags": [
          "trashcan"
        ],
        "summary": "Get rendition content of a deleted node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition content for **renditionId** of file **nodeId**.\n",
        "operationId": "getArchivedNodeRenditionContent",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "placeholder",
            "in": "query",
            "description": "If **true** and there is no rendition for this **nodeId** and **renditionId**,\nthen the placeholder image for the mime type of this rendition is returned, rather\nthan a 404 response.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or is not a file, or **renditionId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission for **nodeId**",
            "content": {}
          },
          "404": {
            "description": "**nodeId** or **renditionId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/downloads": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Create a new download",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:\n\n```JSON\n{\n    \"nodeIds\":\n     [\n       \"c8bb482a-ff3c-4704-a3a3-de1c83ccd84c\",\n       \"cffa62db-aa01-493d-9594-058bc058eeb1\"\n     ]\n}\n```\n\n**Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint\n",
        "operationId": "createDownload",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The nodeIds the content of which will be zipped, which zip will be set as the content of our download node.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request to create a download node was accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **DownloadBodyCreate** is invalid due to incorrect syntax, or **nodeIds** is empty, or **nodeIds** contains a duplicate **nodeId**\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to add a certain **nodeId** to the zip",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "DownloadBodyCreate"
      }
    },
    "/downloads/{downloadId}": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Get a download",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nRetrieve status information for download node **downloadId**\n",
        "operationId": "getDownload",
        "parameters": [
          {
            "name": "downloadId",
            "in": "path",
            "description": "The identifier of a download node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download node information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to get information about **downloadId** node",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Cancel a download",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCancels the creation of a download request.\n\n**Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint\n\nBy default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)\n\nInformation about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint\n\nThe cancel operation is done asynchronously.\n",
        "operationId": "cancelDownload",
        "parameters": [
          {
            "name": "downloadId",
            "in": "path",
            "description": "The identifier of a download node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request to cancel a download was accepted",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **downloadId** is invalid, or **downloadId** does not point to a node of download type\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission cancel the **downloadId** node",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      }
    },
    "/people": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "List people",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nList people.\n\nYou can use the **include** parameter to return any additional information.\n\nThe default sort order for the returned list is for people to be sorted by ascending id.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* id\n* firstName\n* lastName\n",
        "operationId": "listPeople",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the person. The following optional fields can be requested:\n* properties\n* aspectNames\n* capabilities\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Create person",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a person.\n\nIf applicable, the given person's login access can also be optionally disabled.\n\nYou must have admin rights to create a person.\n\nYou can set custom properties when you create a person:\n```JSON\n{\n  \"id\": \"abeecher\",\n  \"firstName\": \"Alice\",\n  \"lastName\": \"Beecher\",\n  \"displayName\": \"Alice Beecher\",\n  \"email\": \"abeecher@example.com\",\n  \"password\": \"secret\",\n  \"properties\":\n  {\n    \"my:property\": \"The value\"\n  }\n}\n```\n**Note:** setting properties of type d:content and d:category are not supported.\n",
        "operationId": "createPerson",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The person details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **personBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to create a person",
            "content": {}
          },
          "409": {
            "description": "Person within given *id* already exists",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "personBodyCreate"
      }
    },
    "/people/{personId}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get a person",
        "description": "Gets information for the person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "people"
        ],
        "summary": "Update person",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdate the given person's details.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\nIf applicable, the given person's login access can also be optionally disabled or re-enabled.\n\nYou must have admin rights to update a person â€” unless updating your own details.\n\nIf you are changing your password, as a non-admin user, then the existing password must also\nbe supplied (using the oldPassword field in addition to the new password value).\n\nAdmin users cannot be disabled by setting enabled to false.\n\nNon-admin users may not disable themselves.\n\nYou can set custom properties when you update a person:\n```JSON\n{\n  \"firstName\": \"Alice\",\n  \"properties\":\n  {\n    \"my:property\": \"The value\"\n  }\n}\n```\n**Note:** setting properties of type d:content and d:category are not supported.\n",
        "operationId": "updatePerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The person details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: the update request is invalid or **personId** is not a valid format or **personBodyUpdate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update a person",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Model integrity exception",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "personBodyUpdate"
      }
    },
    "/people/{personId}/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "summary": "List activities",
        "description": "Gets a list of activities for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "listActivitiesForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "who",
            "in": "query",
            "description": "A filter to include the user's activities only `me`, other user's activities only `others`'\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "query",
            "description": "Include only activity feed entries relating to this site.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, or **who** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the activities for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/favorite-sites": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "List favorite sites",
        "description": "**Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse `/people/{personId}/favorites` instead.\n\nGets a list of a person's favorite sites.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "listFavoriteSitesForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the favorite sites for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Create a site favorite",
        "description": "**Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse `/people/{personId}/favorites` instead.\n\nCreate a site favorite for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\n **Note:** You can favorite more than one site by\nspecifying a list of sites in the JSON body like this:\n\n```JSON\n[\n  {\n    \"id\": \"test-site-1\"\n  },\n  {\n    \"id\": \"test-site-2\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createSiteFavorite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The id of the site to favorite.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteSiteBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteSiteEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **favoriteSiteBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the favorite sites for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "**id** is already a site favorite\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "favoriteSiteBodyCreate"
      }
    },
    "/people/{personId}/favorite-sites/{siteId}": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Get a favorite site",
        "description": "**Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse `/people/{personId}/favorites/{favoriteId}` instead.\n\nGets information on favorite site **siteId** of person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getFavoriteSite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the favorite sites for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Delete a site favorite",
        "description": "**Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future.\nUse `/people/{personId}/favorites/{favoriteId}` instead.\n\nDeletes site **siteId** from the favorite site list of person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteSiteFavorite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the favorite sites for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/people/{personId}/favorites": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "List favorites",
        "description": "Gets a list of favorites for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\nThe default sort order for the returned list of favorites is type ascending, createdAt descending.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n*   `type`\n*   `createdAt`\n*   `title`\n\nYou can use the **where** parameter to restrict the list in the response\nto entries of a specific kind. The **where** parameter takes a value.\nThe value is a single predicate that can include one or more **EXISTS**\nconditions. The **EXISTS** condition uses a single operand to limit the\nlist to include entries that include that one property. The property values are:\n\n*   `target/file`\n*   `target/folder`\n*   `target/site`\n\nFor example, the following **where** parameter restricts the returned list to the file favorites for a person:\n\n```SQL\n(EXISTS(target/file))\n```\nYou can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.\n\n\nFor example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:\n\n```SQL\n(EXISTS(target/file) OR EXISTS(target/folder))\n```\n",
        "operationId": "listFavorites",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist or the current user does not have permission to access the favorites of **personId**\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Create a favorite",
        "description": "Favorite a **site**, **file**, or **folder** in the repository.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\n**Note:** You can favorite more than one entity by\nspecifying a list of objects in the JSON body like this:\n\n```JSON\n[\n  {\n       \"target\": {\n          \"file\": {\n             \"guid\": \"abcde-01234-....\"\n          }\n       }\n   },\n   {\n       \"target\": {\n          \"file\": {\n             \"guid\": \"abcde-09863-....\"\n          }\n       }\n   },\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createFavorite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "An object identifying the entity to be favorited.\n\nThe object consists of a single property which is an object with the name `site`, `file`, or `folder`.\nThe content of that object is the `guid` of the target entity.\n\nFor example, to favorite a file the following body would be used:\n\n```JSON\n{\n   \"target\": {\n      \"file\": {\n         \"guid\": \"abcde-01234-....\"\n      }\n   }\n}\n```\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **favoriteBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist, or the target entity does not exist,\nor a favorite already exists with the specified id, or an\nentity exists with the id of the posted object\nbut is not of the same type of the posted object\n",
            "content": {}
          },
          "409": {
            "description": "The target **guid** has already been favorited",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "favoriteBodyCreate"
      }
    },
    "/people/{personId}/favorites/{favoriteId}": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Get a favorite",
        "description": "Gets favorite **favoriteId** for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getFavorite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "The identifier of a favorite.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **favoriteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Delete a favorite",
        "description": "Deletes **favoriteId** as a favorite of person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteFavorite",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "favoriteId",
            "in": "path",
            "description": "The identifier of a favorite.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **favoriteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/networks": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "List network membership",
        "description": "Gets a list of network memberships for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "listNetworksForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonNetworkPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/networks/{networkId}": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get network information",
        "description": "Gets network information on a single network specified by **networkId** for **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getNetworkForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkId",
            "in": "path",
            "description": "The identifier of a network.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonNetworkEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **networkId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/preferences": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "List preferences",
        "description": "Gets a list of preferences for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\nNote that each preference consists of an **id** and a **value**.\n\nThe **value** can be of any JSON type.\n",
        "operationId": "listPreferences",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferencePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the preferences for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/preferences/{preferenceName}": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Get a preference",
        "description": "Gets a specific preference for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getPreference",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferenceName",
            "in": "path",
            "description": "The name of the preference.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have access to the preferences for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** or **preferenceName** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/site-membership-requests": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List site membership requests",
        "description": "Gets a list of the current site membership requests for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "listSiteMembershipRequestsForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMembershipRequestPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/site-membership-requests/{siteId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site membership request",
        "description": "Gets the site membership request for site **siteId** for person **personId**, if one exists.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getSiteMembershipRequestForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMembershipRequestEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "summary": "Update a site membership request",
        "description": "Updates the message for the site membership request to site **siteId** for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "updateSiteMembershipRequestForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The new message to display",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipRequestBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMembershipRequestEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **id** is invalid\nor **siteMembershipRequestBodyUpdate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipRequestBodyUpdate"
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a site membership request",
        "description": "Deletes the site membership request to site **siteId** for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteSiteMembershipRequestForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List site memberships",
        "description": "Gets a list of site membership information for person **personId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\nYou can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.\n\nExample to filter by **visibility**, use any one of:\n\n```\n(visibility='PRIVATE')\n(visibility='PUBLIC')\n(visibility='MODERATED')\n```\n\nExample to filter by site **preset**:\n\n```\n(preset='site-dashboard')\n```\n\nThe default sort order for the returned list is for sites to be sorted by ascending title.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* role\n",
        "operationId": "listSiteMembershipsForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "in": "query",
            "description": "Use the relations parameter to include one or more related entities in a single response.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteRolePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/sites/{siteId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site membership",
        "description": "Gets site membership information for person **personId** on site **siteId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getSiteMembershipForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteRoleEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a site membership",
        "description": "Deletes person **personId** as a member of site **siteId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteSiteMembershipForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** or **siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/people/{personId}/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List group memberships",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\n Gets a list of group membership information for person **personId**.\n\n You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\n You can use the **include** parameter to return additional information.\n\n You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**\n clause will return just the root groups:\n\n ```\n (isRoot=true)\n ```\n\n The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow\n a result set even further. For example, the following where clause will only return groups belonging to the\n `MY.ZONE` zone.\n\n ```\n where=(zones in ('MY.ZONE'))\n ```\n\n This may be combined with the isRoot filter, as shown below:\n\n ```\n where=(isRoot=false AND zones in ('MY.ZONE'))\n ```\n\n ***Note:*** restrictions include\n * `AND` is the only supported operator when combining `isRoot` and `zones` filters\n * Only one zone is supported by the filter\n * The quoted zone name must be placed in parenthesis â€” a 400 error will result if these are omitted.\n\n\n The default sort order for the returned list is for groups to be sorted by ascending displayName.\n You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n * id\n * displayName\n",
        "operationId": "listGroupMembershipsForPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, **orderBy** or **personId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      }
    },
    "/people/{personId}/request-password-reset": {
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Request password reset",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nInitiates the reset password workflow to send an email with reset password instruction to the user's registered email.\n\nThe client is mandatory in the request body. For example:\n```JSON\n{\n  \"client\": \"myClient\"\n}\n```\n**Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box\nshare is registered as a default client, so you could pass **share** as the client name:\n```JSON\n{\n  \"client\": \"share\"\n}\n```\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "requestPasswordReset",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The client name to send email with app-specific url.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response or even when the **personId** does not exist or the user is disabled by an Administrator\n",
            "content": {}
          },
          "404": {
            "description": "**client** is not registered\n",
            "content": {}
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "clientBody"
      }
    },
    "/people/{personId}/reset-password": {
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Reset password",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nResets user's password\n\nThe password, id and key properties are mandatory in the request body. For example:\n```JSON\n{\n  \"password\":\"newPassword\",\n  \"id\":\"activiti$10\",\n  \"key\":\"4dad6d00-0daf-413a-b200-f64af4e12345\"\n}\n```\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The reset password details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response or even when no workflow instance is found with the given **id** or the workflow instance is\ninvalid (already been used or expired) or the given **personId** does not match the person's id requesting\nthe password reset or the given workflow **key** does not match the recovered key.\n",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: Value of **password**, **id** or **key** is invalid\n",
            "content": {}
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "passwordResetBody"
      }
    },
    "/people/{personId}/avatar": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get avatar image",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets the avatar image related to the person **personId**. If the person has no related avatar then\nthe **placeholder** query parameter can be optionally used to request a placeholder image to be returned.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getAvatarImage",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "placeholder",
            "in": "query",
            "description": "If **true** and there is no avatar for this **personId**\nthen the placeholder image is returned, rather than a 404 response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **personId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist or avatar does not exist (and no placeholder requested)\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      },
      "put": {
        "tags": [
          "people"
        ],
        "summary": "Update avatar image",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nUpdates the avatar image related to the person **personId**.\n\nThe request body should be the binary stream for the avatar image. The content type of the file\nshould be an image file. This will be used to generate an \"avatar\" thumbnail rendition.\n\nYou must be the person or have admin rights to update a person's avatar.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "updateAvatarImage",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The binary content",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **personId** is not a valid format or the avatar cannot be uploaded\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update the avatar image for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "413": {
            "description": "Content exceeds individual file size limit (configured for network/system)",
            "content": {}
          },
          "501": {
            "description": "Renditions/thumbnails are disabled for the system",
            "content": {}
          },
          "507": {
            "description": "Content exceeds overall storage quota limit configured for the network/system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2",
        "x-codegen-request-body-name": "contentBodyUpdate"
      },
      "delete": {
        "tags": [
          "people"
        ],
        "summary": "Delete avatar image",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nDeletes the avatar image related to person **personId**.\n\nYou must be the person or have admin rights to update a person's avatar.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteAvatarImage",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete the avatar image for **personId**",
            "content": {}
          },
          "404": {
            "description": "**personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List sites",
        "description": "Gets a list of sites in this repository.\n\nYou can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.\n\nExample to filter by **visibility**, use any one of:\n\n```\n(visibility='PRIVATE')\n(visibility='PUBLIC')\n(visibility='MODERATED')\n```\n\nExample to filter by site **preset**:\n\n```\n(preset='site-dashboard')\n```\n\nThe default sort order for the returned list is for sites to be sorted by ascending title.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* description\n\nYou can use the **relations** parameter to include one or more related\nentities in a single response and so reduce network traffic.\n\nThe entity types in Alfresco are organized in a tree structure.\nThe **sites** entity has two children, **containers** and **members**.\nThe following relations parameter returns all the container and member\nobjects related to each site:\n\n```\ncontainers,members\n```\n",
        "operationId": "listSites",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relations",
            "in": "query",
            "description": "Use the relations parameter to include one or more related entities in a single response.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Create a site",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreates a default site with the given details.  Unless explicitly specified, the site id will be generated\nfrom the site title. The site id must be unique and only contain alphanumeric and/or dash characters.\n\nNote: the id of a site cannot be updated once the site has been created.\n\nFor example, to create a public site called \"Marketing\" the following body could be used:\n```JSON\n{\n  \"title\": \"Marketing\",\n  \"visibility\": \"PUBLIC\"\n}\n```\n\nThe creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.\n\n**Note:** if skipped then such a site will **not** work within Share.\n\nThe addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.\n\nThe creator will be added as a member with Site Manager role.\n\nWhen you create a site, a container called **documentLibrary** is created for you in the new site.\nThis container is the root folder for content stored in the site.\n",
        "operationId": "createSite",
        "parameters": [
          {
            "name": "skipConfiguration",
            "in": "query",
            "description": "Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skipAddToFavorites",
            "in": "query",
            "description": "Flag to indicate whether the site should not be added to the user's site favorites.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The site details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **id**, **title**, or **description** exceed the maximum length;\nor **id** contains invalid characters; or **siteBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "409": {
            "description": "Site with the given identifier already exists",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "siteBodyCreate"
      }
    },
    "/sites/{siteId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site",
        "description": "Gets information for site **siteId**.\n\nYou can use the **relations** parameter to include one or more related\nentities in a single response and so reduce network traffic.\n\nThe entity types in Alfresco are organized in a tree structure.\nThe **sites** entity has two children, **containers** and **members**.\nThe following relations parameter returns all the container and member\nobjects related to the site **siteId**:\n\n```\ncontainers,members\n```\n",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relations",
            "in": "query",
            "description": "Use the relations parameter to include one or more related entities in a single response.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "summary": "Update a site",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nUpdate the details for the given site **siteId**. Site Manager or otherwise a\n(site) admin can update title, description or visibility.\n\nNote: the id of a site cannot be updated once the site has been created.\n",
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The site information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **siteBodyUpdate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update the site that is visible to them.",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "siteBodyUpdate"
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a site",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the site with **siteId**.\n",
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete the site that is visible to them.",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/sites/{siteId}/containers": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List site containers",
        "description": "Gets a list of containers for the site **siteId**.",
        "operationId": "listSiteContainers",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteContainerPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{siteId}/containers/{containerId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site container",
        "description": "Gets information on the container **containerId** in site **siteId**.",
        "operationId": "getSiteContainer",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "containerId",
            "in": "path",
            "description": "The unique identifier of a site container.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteContainerEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **containerId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/site-membership-requests": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get site membership requests",
        "description": "Get the list of site membership requests the user can action.\n\nYou can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:\n\n```\n(siteId=mySite)\n```\n\nThe **where** parameter can also be used to filter by ***personId***. For example:\n\n```\nwhere=(personId=person)\n```\n\nThis may be combined with the siteId filter, as shown below:\n\n```\nwhere=(siteId=mySite AND personId=person))\n```\n",
        "operationId": "getSiteMembershipRequests",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMembershipRequestWithPersonPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{siteId}/site-membership-requests/{inviteeId}/approve": {
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Approve a site membership request",
        "description": "Approve a site membership request.\n",
        "operationId": "approveSiteMembershipRequest",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteeId",
            "in": "path",
            "description": "The invitee user name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Accepting a request to join, optionally, allows assignment of a role to the user.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipApprovalBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: value of **siteId** or **inviteeId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to approve membership request",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **inviteeId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception or not allowed to approve membership request.\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipApprovalBody"
      }
    },
    "/sites/{siteId}/site-membership-requests/{inviteeId}/reject": {
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Reject a site membership request",
        "description": "Reject a site membership request.\n",
        "operationId": "rejectSiteMembershipRequest",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteeId",
            "in": "path",
            "description": "The invitee user name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rejecting a request to join, optionally, allows the inclusion of comment.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipRejectionBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: value of **siteId** or **inviteeId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to reject membership request",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **inviteeId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception or not allowed to reject membership request.\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipRejectionBody"
      }
    },
    "/sites/{siteId}/members": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List site memberships",
        "description": "Gets a list of site memberships for site **siteId**.",
        "operationId": "listSiteMemberships",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list.\n*   ```where=(isMemberOfGroup=false|true)```\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMemberPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Create a site membership",
        "description": "Creates a site membership for person **personId** on site **siteId**.\n\nYou can set the **role** to one of four types:\n\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n\n**Note:** You can create more than one site membership by\nspecifying a list of people in the JSON body like this:\n\n```JSON\n[\n  {\n    \"role\": \"SiteConsumer\",\n    \"id\": \"joe\"\n  },\n  {\n    \"role\": \"SiteConsumer\",\n    \"id\": \"fred\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createSiteMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The person to add and their role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMemberEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **role** or **id** is invalid\nor **siteMembershipBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to invite a person",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **personId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Person with this **id** is already a member",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipBodyCreate"
      }
    },
    "/sites/{siteId}/members/{personId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get a site membership",
        "description": "Gets site membership information for person **personId** on site **siteId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "getSiteMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMemberEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **personId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "summary": "Update a site membership",
        "description": "Update the membership of person **personId** in site **siteId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n\nYou can set the **role** to one of four types:\n\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n",
        "operationId": "updateSiteMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The persons new role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteMemberEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **role** does not exist\nor **siteMembershipBodyUpdate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **personId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception (eg. last site member must be a site manager) or not allowed to update member",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipBodyUpdate"
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a site membership",
        "description": "Deletes person **personId** as a member of site **siteId**.\n\nYou can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.\n",
        "operationId": "deleteSiteMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "personId",
            "in": "path",
            "description": "The identifier of a person.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **personId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception (eg. last site member must be a site manager) or not allowed to delete member",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{siteId}/group-members": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "List group membership for site",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets a list of group membership for site **siteId**.\n",
        "operationId": "listSiteGroups",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteGroupPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sites"
        ],
        "summary": "Create a site membership for group",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nCreates a site membership for group **groupId** on site **siteId**.\nYou can set the **role** to one of four types:\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n**Note:** You can create more than one site membership by\nspecifying a list of group in the JSON body like this:\n\n```JSON\n  [\n   {\n     \"role\": \"SiteConsumer\",\n     \"id\": \"authorityId\"\n   },\n   {\n     \"role\": \"SiteConsumer\",\n     \"id\": \"authorityId\"\n   }\n  ]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n```JSON\n  {\n    \"list\": {\n      \"pagination\": {\n        \"count\": 2,\n        \"hasMoreItems\": false,\n        \"totalItems\": 2,\n        \"skipCount\": 0,\n        \"maxItems\": 100\n      },\n      \"entries\": [\n        {\n          \"entry\": {\n            ...\n          }\n        },\n        {\n          \"entry\": {\n            ...\n          }\n        }\n      ]\n    }\n  }\n```\n",
        "operationId": "createSiteGroupMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The group to add and their role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteGroupEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **role** or **id** is invalid\nor **siteMembershipBodyCreate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to invite a Group",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **groupId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Group with this **id** is already a member",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipBodyCreate"
      }
    },
    "/sites/{siteId}/group-members/{groupId}": {
      "get": {
        "tags": [
          "sites"
        ],
        "summary": "Get information about site membership of group",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nGets site membership information for group **groupId** on site **siteId**.\n",
        "operationId": "getSiteGroupMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteGroupEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **groupId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "summary": "Update site membership of group",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nUpdate the membership of person **groupId** in site **siteId**.\nYou can set the **role** to one of four types:\n* SiteConsumer\n* SiteCollaborator\n* SiteContributor\n* SiteManager\n",
        "operationId": "updateSiteGroupMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The groupId new role",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteMembershipBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteGroupEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **role** does not exist\nor **siteMembershipBodyUpdate** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **groupId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception (eg. last site member must be a site manager) or not allowed to update group",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "siteMembershipBodyUpdate"
      },
      "delete": {
        "tags": [
          "sites"
        ],
        "summary": "Delete a group membership for site",
        "description": "**Note:** this endpoint is available in Alfresco 7.0.0 and newer versions.\n\nDeletes group **groupId** as a member of site **siteId**.\n",
        "operationId": "deleteSiteGroupMembership",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "The identifier of a site.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**siteId** or **groupId** does not exist\n",
            "content": {}
          },
          "422": {
            "description": "Integrity exception (eg. last site member must be a site manager) or not allowed to delete groupId",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "List tags",
        "description": "Gets a list of tags in this repository.\n\nYou can use the **include** parameter to return additional **values** information.\n",
        "operationId": "listTags",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the tag. The following optional fields can be requested:\n* count\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "tags"
        ],
        "summary": "Get a tag",
        "description": "Get a specific tag with **tagId**.",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of a tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntry"
                },
                "example": {
                  "id": "ed2444b5-d0c1-440b-b5b8-34a53e578091",
                  "tag": "test tag 1"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**tagId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tags"
        ],
        "summary": "Update a tag",
        "description": "Updates the tag **tagId**.",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of a tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The updated tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **tagBodyUpdate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**tagId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tagBodyUpdate"
      }
    },
    "/networks/{networkId}": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get a network",
        "description": "Gets information for a network **networkId**.",
        "operationId": "getNetwork",
        "parameters": [
          {
            "name": "networkId",
            "in": "path",
            "description": "The identifier of a network.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonNetworkEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**networkId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/shared-links": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "List shared links",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGet a list of links that the current user has read permission on source node.\n\nThe list is ordered in descending modified order.\n\n**Note:** The list of links is eventually consistent so newly created shared links may not appear immediately.\n",
        "operationId": "listSharedLinks",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list by \"sharedByUser\" userid of person who shared the link (can also use -me-)\n\n*   ```where=(sharedByUser='jbloggs')```\n\n*   ```where=(sharedByUser='-me-')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the shared link, the following optional fields can be requested:\n* allowableOperations\n* path\n* properties\n* isFavorite\n* aspectNames\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedLinkPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "post": {
        "tags": [
          "shared-links"
        ],
        "summary": "Create a shared link to a file",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nCreate a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set,\nso the shared link would become invalid when the expiry date is reached. For example:\n\n```JSON\n  {\n    \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-3333333333\",\n    \"expiresAt\": \"2017-03-23T23:00:00.000+0000\"\n  }\n```\n\n**Note:** You can create shared links to more than one file\nspecifying a list of **nodeId**s in the JSON body like this:\n\n```JSON\n[\n  {\n    \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-4444444444\"\n  },\n  {\n    \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-5555555555\"\n  }\n]\n```\nIf you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:\n\n```JSON\n{\n  \"list\": {\n    \"pagination\": {\n      \"count\": 2,\n      \"hasMoreItems\": false,\n      \"totalItems\": 2,\n      \"skipCount\": 0,\n      \"maxItems\": 100\n    },\n    \"entries\": [\n      {\n        \"entry\": {\n          ...\n        }\n      },\n      {\n        \"entry\": {\n          ...\n        }\n      }\n    ]\n  }\n}\n```\n",
        "operationId": "createSharedLink",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the shared link, the following optional fields can be requested:\n* allowableOperations\n* path\n* properties\n* isFavorite\n* aspectNames\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The nodeId to create a shared link for.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedLinkBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedLinkEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **nodeId** is not a valid format, or does not identify a file,\nor **sharedLinkBodyCreate** invalid, or the specified expiry date is invalid. E.g. the expiry date\nhas already passed\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to create **sharedId** (for example, no read permission)",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Shared link already exists for **nodeId**",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "sharedLinkBodyCreate"
      }
    },
    "/shared-links/{sharedId}": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "Get a shared link",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets minimal information for the file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "getSharedLink",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharedLinkEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format\n",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      },
      "delete": {
        "tags": [
          "shared-links"
        ],
        "summary": "Deletes a shared link",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nDeletes the shared link with identifier **sharedId**.\n",
        "operationId": "deleteSharedLink",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete **sharedId**",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/shared-links/{sharedId}/content": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "Get shared link content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the content of the file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "getSharedLinkContent",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format\n",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/shared-links/{sharedId}/renditions": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "List renditions for a shared link",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of the rendition information for the file with shared link identifier **sharedId**.\n\nThis API method returns rendition information, including the rendition id, for each rendition\nwhere the rendition status is CREATED, which means the rendition is availableÂ to view/download.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "listSharedLinkRenditions",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format\n",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/shared-links/{sharedId}/renditions/{renditionId}": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "Get shared link rendition information",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets rendition information for the file with shared link identifier **sharedId**.\n\nThis API method returns rendition information where the rendition status is CREATED,\nwhich means the rendition is availableÂ to view/download.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "getSharedLinkRendition",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenditionEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid\n",
            "content": {}
          },
          "404": {
            "description": "**sharedId**  or **renditionId** does not exist (ie. not CREATED)\n",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/shared-links/{sharedId}/renditions/{renditionId}/content": {
      "get": {
        "tags": [
          "shared-links"
        ],
        "summary": "Get shared link rendition content",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets the rendition content for file with shared link identifier **sharedId**.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "getSharedLinkRenditionContent",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "renditionId",
            "in": "path",
            "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachment",
            "in": "query",
            "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Range",
            "in": "header",
            "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "content": {}
          },
          "304": {
            "description": "Content has not been modified since the date provided in the If-Modified-Since header",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format, or **renditionId** is invalid\n",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist\n",
            "content": {}
          },
          "416": {
            "description": "Range Not Satisfiable",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/shared-links/{sharedId}/email": {
      "post": {
        "tags": [
          "shared-links"
        ],
        "summary": "Email shared link",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nSends email with app-specific url including identifier **sharedId**.\n\nThe client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info:\n```JSON\n{\n    \"client\": \"myClient\",\n    \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"]\n}\n```\nA plain text message property can be optionally provided in the request body to customise the sent email.\nAlso, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco).\nFor example, to email a shared link with a messages and a locale:\n```JSON\n{\n    \"client\": \"myClient\",\n    \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"],\n    \"message\": \"myMessage\",\n    \"locale\":\"en-GB\"\n}\n```\n**Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box\n share is registered as a default client, so you could pass **share** as the client name:\n```JSON\n{\n    \"client\": \"share\",\n    \"recipientEmails\": [\"john.doe@acme.com\"]\n}\n```\n",
        "operationId": "emailSharedLink",
        "parameters": [
          {
            "name": "sharedId",
            "in": "path",
            "description": "The identifier of a shared link to a file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The shared link email to send.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharedLinkBodyEmail"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **sharedId** is not a valid format\nor **sharedLinkBodyEmail** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**sharedId** does not exist or **client** is not registered\n",
            "content": {}
          },
          "501": {
            "description": "Shared links are disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2",
        "x-codegen-request-body-name": "sharedLinkBodyEmail"
      }
    },
    "/probes/{probeId}": {
      "get": {
        "tags": [
          "probes"
        ],
        "summary": "Check readiness and liveness of the repository",
        "description": "**Note:** this endpoint is available in Alfresco 6.0 and newer versions.\n\nReturns a status of 200 to indicate success and 503 for failure.\n\nThe readiness probe is normally only used to check repository startup.\n\nThe liveness probe should then be used to check the repository is still responding to requests.\n\n**Note:** No authentication is required to call this endpoint.\n",
        "operationId": "getProbe",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The name of the probe:\n* -ready-\n* -live-\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbeEntry"
                }
              }
            }
          },
          "404": {
            "description": "**probeId** does not exist\n",
            "content": {}
          },
          "503": {
            "description": "Service Unavailable - Probe failure status.",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "6.0"
      }
    },
    "/queries/nodes": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Find nodes",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of nodes that match the given search criteria.\n\nThe search term is used to look for nodes that match against name, title, description, full text content or tags.\n\nThe search term:\n- must contain a minimum of 3 alphanumeric characters\n- allows \"quoted term\"\n- can optionally use '*' for wildcard matching\n\nBy default, file and folder types will be searched unless a specific type is provided as a query parameter.\n\nBy default, the search will be across the repository unless a specific root node id is provided to start the search from.\n\nYou can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* name\n* modifiedAt\n* createdAt\n",
        "operationId": "findNodes",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The term to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rootNodeId",
            "in": "query",
            "description": "The id of the node to start the search from.\n\nSupports the aliases -my-, -root- and -shared-.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "nodeType",
            "in": "query",
            "description": "Restrict the returned results to only those of the given node type and its sub-types\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **nodeType** unknown, or **orderBy** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**rootNodeId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/queries/sites": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Find sites",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of sites that match the given search criteria.\n\nThe search term is used to look for sites that match against site id, title or description.\n\nThe search term:\n- must contain a minimum of 2 alphanumeric characters\n- can optionally use '*' for wildcard matching within the term\n\nThe default sort order for the returned list is for sites to be sorted by ascending id.\nYou can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* title\n* description\n",
        "operationId": "findSites",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The term to search for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitePaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/queries/people": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Find people",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nGets a list of people that match the given search criteria.\n\nThe search term is used to look for matches against person id, firstname and lastname.\n\nThe search term:\n- must contain a minimum of 2 alphanumeric characters\n- can optionally use '*' for wildcard matching within the term\n\nYou can sort the result list using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:\n* id\n* firstName\n* lastName\n",
        "operationId": "findPeople",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "description": "The term to search for.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid, or search **term** too short, or **orderBy** invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2"
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List groups",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGets a list of groups.\n\nYou can use the **include** parameter to return additional information.\n\nYou can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**\nclause will return just the root groups:\n\n```\n(isRoot=true)\n```\n\nThe **where** parameter can also be used to filter by ***zone*** and ***displayName***.\nThey may be combined with isRoot to narrow a result set even further. \nFor example, the following where clause will only return groups belonging to the `MY.ZONE` zone.\n\n```\nwhere=(zones in ('MY.ZONE'))\n```\n\nThis may be combined with the isRoot filter, as shown below:\n\n```\nwhere=(isRoot=false AND zones in ('MY.ZONE'))\n```\nThe following where clause will only return groups with displayName `MY.GROUP.NAME`. \n\n```\nwhere=(displayName in ('MY.GROUP.NAME'))\n```\nThis may be combined with the isRoot and zones filter, as shown below:\n\n```\nwhere=(isRoot=false AND displayName in ('MY.GROUP.NAME'))\n```\n\n```\nwhere=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n```\n\n```\nwhere=(isRoot=false AND zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME'))\n```\n\n***Note:*** restrictions include\n* `AND` is the only supported operator when combining `isRoot`, `zones` and `displayName` filters\n* Only one zone is supported by the filter\n* Only one displayName is supported by the filter\n* The quoted zone name and displayName must be placed in parenthesis â€” a 400 error will result if these are omitted.\n\nThe default sort order for the returned list is for groups to be sorted by ascending displayName.\nYou can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:\n* id\n* displayName\n",
        "operationId": "listGroups",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount**, or **orderBy**, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a group",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreate a group.\n\nThe group id must start with \"GROUP\\_\". If this is omitted it will be added automatically.\nThis format is also returned when listing groups or group memberships. It should be noted\nthat the other group-related operations also expect the id to start with \"GROUP\\_\".\n\nIf one or more parentIds are specified then the group will be created and become a member\nof each of the specified parent groups.\n\nIf no parentIds are specified then the group will be created as a root group.\n\nThe group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.\n\nYou must have admin rights to create a group.\n",
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The group to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: invalid **groupBodyCreate**\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to create a group",
            "content": {}
          },
          "404": {
            "description": "**parentIds** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "**id** clashes with an existing group\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "groupBodyCreate"
      }
    },
    "/groups/{groupId}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get group details",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGet details for group **groupId**.\n\nYou can use the **include** parameter to return additional information.\n",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: invalid **groupId**\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**groupId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update group details",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nUpdate details (displayName) for group **groupId**.\n\nYou must have admin rights to update a group.\n",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The group information to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **groupId** or **groupBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to update a group",
            "content": {}
          },
          "404": {
            "description": "**groupId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Trying to modify a pre-defined system group, such as GROUP_EVERYONE\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "groupBodyUpdate"
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a group",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nDelete group **groupId**.\n\nThe option to cascade delete applies this recursively to any hierarchy of group members.\nIn this case, removing a group member does not delete the person or sub-group itself.\nIf a removed sub-group no longer has any parent groups then it becomes a root group.\n\nYou must have admin rights to delete a group.\n",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cascade",
            "in": "query",
            "description": "If **true** then the delete will be applied in cascade to sub-groups.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **groupId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to delete a group member",
            "content": {}
          },
          "404": {
            "description": "**groupId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Trying to delete a pre-defined system group, such as GROUP_EVERYONE.\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      }
    },
    "/groups/{groupId}/members": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List memberships of a group",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nGets a list of the group memberships for the group **groupId**.\n\nYou can use the **where** parameter to filter the returned groups by **memberType**.\n\nExample to filter by **memberType**, use any one of:\n\n```\n(memberType='GROUP')\n(memberType='PERSON')\n```\n\nThe default sort order for the returned list is for group members to be sorted by ascending displayName.\nYou can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter:\n* id\n* displayName\n",
        "operationId": "listGroupMemberships",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "A string to restrict the returned objects by using a predicate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemberPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount**, **orderBy**, or **where** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**groupId** does not exist\n",
            "content": {}
          },
          "405": {
            "description": "Trying to list all members of a pre-defined system group, such as GROUP_EVERYONE\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a group membership",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nCreate a group membership (for an existing person or group) within a group **groupId**.\n\nIf the added group was previously a root group then it becomes a non-root group since it now has a parent.\n\nIt is an error to specify an **id** that does not exist.\n\nYou must have admin rights to create a group membership.\n",
        "operationId": "createGroupMembership",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The group membership to add (person or sub-group).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembershipBodyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMemberEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **groupId** or **groupMembershipBodyCreate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to create a group membership",
            "content": {}
          },
          "404": {
            "description": "**groupId** or *id* (of group or person) does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Trying to modify a pre-defined system group, such as GROUP_EVERYONE.\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1",
        "x-codegen-request-body-name": "groupMembershipBodyCreate"
      }
    },
    "/groups/{groupId}/members/{groupMemberId}": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a group membership",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.\n\nDelete group member **groupMemberId** (person or sub-group) from group **groupId**.\n\nRemoving a group member does not delete the person or sub-group itself.\n\nIf a removed sub-group no longer has any parent groups then it becomes a root group.\n\nYou must have admin rights to delete a group membership.\n",
        "operationId": "deleteGroupMembership",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of a group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupMemberId",
            "in": "path",
            "description": "The identifier of a person or group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: value of **groupId**, or **groupMemberId** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to delete a group membership",
            "content": {}
          },
          "404": {
            "description": "**groupId** or **groupMemberId** does not exist\n",
            "content": {}
          },
          "409": {
            "description": "Trying to delete a member of a pre-defined system group, such as GROUP_EVERYONE\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.1"
      }
    },
    "/audit-applications": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "List audit applications",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets a list of audit applications in this repository.\n\nThis list may include pre-configured audit applications, if enabled, such as:\n\n* alfresco-access\n* CMISChangeLog\n* Alfresco Tagging Service\n* Alfresco Sync Service (used by Enterprise Cloud Sync)\n\nYou must have admin rights to retrieve audit information.\n",
        "operationId": "listAuditApps",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditAppPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to retrieve audit information",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/audit-applications/{auditApplicationId}": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "Get audit application info",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGet status of an audit application **auditApplicationId**.\n\nYou must have admin rights to retrieve audit information.\n\nYou can use the **include** parameter to return the minimum and/or maximum audit record id for the application.\n",
        "operationId": "getAuditApp",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested:\n* max\n* min\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditApp"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: invalid **auditApplicationId**\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to retrieve audit information",
            "content": {}
          },
          "404": {
            "description": "**applicationId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      },
      "put": {
        "tags": [
          "audit"
        ],
        "summary": "Update audit application info",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nDisable or re-enable the audit application **auditApplicationId**.\n\nNew audit entries will not be created for a disabled audit application until\nit is re-enabled (and system-wide auditing is also enabled).\n\nNote, it is still possible to query &/or delete any existing audit entries even\nif auditing is disabled for the audit application.\n\nYou must have admin rights to update audit application.\n",
        "operationId": "updateAuditApp",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The audit application to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditBodyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditApp"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **auditApplicationId** is not a valid format or **auditAppBodyUpdate** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to update audit application",
            "content": {}
          },
          "404": {
            "description": "**auditApplicationId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2",
        "x-codegen-request-body-name": "auditAppBodyUpdate"
      }
    },
    "/audit-applications/{auditApplicationId}/audit-entries": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "List audit entries for an audit application",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets a list of audit entries for audit application **auditApplicationId**.\n\nYou can use the **include** parameter to return additional **values** information.\n\nThe list can be filtered by one or more of:\n* **createdByUser** person id\n* **createdAt** inclusive time period\n* **id** inclusive range of ids\n* **valuesKey** audit entry values contains the exact matching key\n* **valuesValue** audit entry values contains the exact matching value\n\nThe default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**\nmodifier to specify an ascending or descending sort order.\n\nFor example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.\n\nYou must have admin rights to retrieve audit information.\n",
        "operationId": "listAuditEntriesForAuditApp",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "omitTotalItems",
            "in": "query",
            "description": "A boolean to control if the response provides the total numbers of items in the collection.\nIf not supplied then the default value is false.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list. Here are some examples:\n\n*   ```where=(createdByUser='jbloggs')```\n\n*   ```where=(id BETWEEN ('1234', '4321')```\n\n*   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n\n*   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n\n*   ```where=(valuesKey='/alfresco-access/login/user')```\n\n*   ```where=(valuesKey='/alfresco-access/transaction/action' and valuesValue='DELETE')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the audit entry. The following optional fields can be requested:\n* values\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntryPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: *auditApplicationId** is not a valid format, value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to retrieve audit information",
            "content": {}
          },
          "404": {
            "description": "**applicationId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      },
      "delete": {
        "tags": [
          "audit"
        ],
        "summary": "Permanently delete audit entries for an audit application",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nPermanently delete audit entries for an audit application **auditApplicationId**.\n\nThe **where** clause must be specified, either with an inclusive time period or for\nan inclusive range of ids. The delete is within the context of the given audit application.\n\nFor example:\n\n*   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n*   ```where=(id BETWEEN ('1234', '4321')```\n\nYou must have admin rights to delete audit information.\n",
        "operationId": "deleteAuditEntriesForAuditApp",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:\n\n*   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n*   ```where=(id BETWEEN ('1234', '4321')```\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **auditApplicationId** is not a valid format or invalid **where**\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete audit information",
            "content": {}
          },
          "404": {
            "description": "**auditApplicationId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "Get audit entry",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets audit entry **auditEntryId**.\n\nYou must have admin rights to access audit information.\n",
        "operationId": "getAuditEntry",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auditEntryId",
            "in": "path",
            "description": "The identifier of an audit entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntryEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to retrieve audit information",
            "content": {}
          },
          "404": {
            "description": "**auditApplicationId** or **auditEntryId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      },
      "delete": {
        "tags": [
          "audit"
        ],
        "summary": "Permanently delete an audit entry",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nPermanently delete a single audit entry **auditEntryId**.\n\nYou must have admin rights to delete audit information.\n",
        "operationId": "deleteAuditEntry",
        "parameters": [
          {
            "name": "auditApplicationId",
            "in": "path",
            "description": "The identifier of an audit application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "auditEntryId",
            "in": "path",
            "description": "The identifier of an audit entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter: **auditApplicationId** or **auditEntryId** is not a valid format\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Current user does not have permission to delete audit information",
            "content": {}
          },
          "404": {
            "description": "**auditApplicationId** or **auditEntryId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/nodes/{nodeId}/audit-entries": {
      "get": {
        "tags": [
          "audit"
        ],
        "summary": "List audit entries for a node",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets a list of audit entries for node **nodeId**.\n\nThe list can be filtered by **createdByUser** and for a given inclusive time period.\n\nThe default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC**\nmodifier to specify an ascending or descending sort order.\n\nFor example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.\n\nThis relies on the pre-configured 'alfresco-access' audit application.\n",
        "operationId": "listAuditEntriesForNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "The identifier of a node.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "where",
            "in": "query",
            "description": "Optionally filter the list. Here are some examples:\n\n*   ```where=(createdByUser='-me-')```\n\n*   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n\n*   ```where=(createdByUser='jbloggs' and createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')```\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Returns additional information about the audit entry. The following optional fields can be requested:\n* values\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntryPaging"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: *nodeId** is not a valid format, value of **maxItems** or **skipCount** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "User does not have permission to retrieve audit information",
            "content": {}
          },
          "404": {
            "description": "**nodeId** does not exist\n",
            "content": {}
          },
          "501": {
            "description": "Audit is disabled for the system",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/action-definitions": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "Retrieve list of available actions",
        "description": "**Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.\n\nGets a list of all available actions\n\nThe default sort order for the returned list is for actions to be sorted by ascending name.\nYou can override the default by using the **orderBy** parameter.\n\nYou can use any of the following fields to order the results:\n* name\n* title\n",
        "operationId": "listActions",
        "parameters": [
          {
            "name": "skipCount",
            "in": "query",
            "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "maxItems",
            "in": "query",
            "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDefinitionList"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: value of **maxItems**, **skipCount** or **orderBy** is invalid\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/action-definitions/{actionDefinitionId}": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "Retrieve the details of an action definition",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nRetrieve the details of the action denoted by **actionDefinitionId**.\n",
        "operationId": "actionDetails",
        "parameters": [
          {
            "name": "actionDefinitionId",
            "in": "path",
            "description": "The identifier of an action definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDefinitionEntry"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**actionDefinitionId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2"
      }
    },
    "/action-executions": {
      "post": {
        "tags": [
          "actions"
        ],
        "summary": "Execute an action",
        "description": "**Note:** this endpoint is available in Alfresco 5.2 and newer versions.\n\nExecutes an action\n\nAn action may be executed against a node specified by **targetId**. For example:\n\n```\n{\n  \"actionDefinitionId\": \"copy\",\n  \"targetId\": \"4c4b3c43-f18b-43ff-af84-751f16f1ddfd\",\n  \"params\": {\n    \"destination-folder\": \"34219f79-66fa-4ebf-b371-118598af898c\"\n  }\n}\n```\n\nPerforming a POST with the request body shown above will result in the node identified by ```targetId```\nbeing copied to the destination folder specified in the ```params``` object by the key ```destination-folder```.\n\n**targetId** is optional, however, currently **targetId** must be a valid node ID.\nIn the future, actions may be executed against different entity types or\nexecuted without the need for the context of an entity.\n\n\nParameters supplied to the action within the ```params``` object will be converted to the expected type,\nwhere possible using the DefaultTypeConverter class. In addition:\n\n* Node IDs may be supplied in their short form (implicit workspace://SpacesStore prefix)\n* Aspect names may be supplied using their short form, e.g. cm:versionable or cm:auditable\n\nIn this example, we add the aspect ```cm:versionable``` to a node using the QName resolution mentioned above:\n\n```\n{\n  \"actionDefinitionId\": \"add-features\",\n  \"targetId\": \"16349e3f-2977-44d1-93f2-73c12b8083b5\",\n  \"params\": {\n    \"aspect-name\": \"cm:versionable\"\n  }\n}\n```\n\nThe ```actionDefinitionId``` is the ```id``` of an action definition as returned by\nthe _list actions_ operations (e.g. GET /action-definitions).\n\nThe action will be executed **asynchronously** with a `202` HTTP response signifying that\nthe request has been accepted successfully. The response body contains the unique ID of the action\npending execution. The ID may be used, for example to correlate an execution with output in the server logs.\n",
        "operationId": "actionExec",
        "requestBody": {
          "description": "Action execution details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionBodyExec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Action execution request accepted and pending execution.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionExecResultEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter: **actionDefinitionId** missing but required by the action\n",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "404": {
            "description": "**actionDefinitionId** or **targetId** does not exist\n",
            "content": {}
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-alfresco-since": "5.2.2",
        "x-codegen-request-body-name": "actionBodyExec"
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "required": [
              "briefSummary",
              "descriptionURL",
              "stackTrace",
              "statusCode"
            ],
            "type": "object",
            "properties": {
              "errorKey": {
                "type": "string"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32"
              },
              "briefSummary": {
                "type": "string"
              },
              "stackTrace": {
                "type": "string"
              },
              "descriptionURL": {
                "type": "string"
              },
              "logId": {
                "type": "string"
              }
            }
          }
        }
      },
      "Capabilities": {
        "type": "object",
        "properties": {
          "isAdmin": {
            "type": "boolean"
          },
          "isGuest": {
            "type": "boolean"
          },
          "isMutable": {
            "type": "boolean"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of objects in the entries array.\n",
            "format": "int64"
          },
          "hasMoreItems": {
            "type": "boolean",
            "description": "A boolean value which is **true** if there are more entities in the collection\nbeyond those in this response. A true value means a request with a larger value\nfor the **skipCount** or the **maxItems** parameter will return more entities.\n"
          },
          "totalItems": {
            "type": "integer",
            "description": "An integer describing the total number of entities in the collection.\nThe API might not be able to determine this value,\nin which case this property will not be present.\n",
            "format": "int64"
          },
          "skipCount": {
            "type": "integer",
            "description": "An integer describing how many entities exist in the collection before\nthose included in this list. If there was no **skipCount** parameter then the\ndefault value is 0.\n",
            "format": "int64"
          },
          "maxItems": {
            "type": "integer",
            "description": "The value of the **maxItems** parameter used to generate this list.\nIf there was no **maxItems** parameter then the default value is 100.\n",
            "format": "int64"
          }
        }
      },
      "SiteBodyCreate": {
        "required": [
          "title",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "default": "PUBLIC",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "MODERATED"
            ]
          }
        }
      },
      "SitePaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteEntry"
                }
              }
            }
          }
        }
      },
      "SiteEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Site"
          }
        }
      },
      "Site": {
        "required": [
          "guid",
          "id",
          "title",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MODERATED",
              "PUBLIC"
            ]
          },
          "preset": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          }
        }
      },
      "SiteBodyUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MODERATED",
              "PUBLIC"
            ]
          }
        }
      },
      "SiteContainerPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteContainerEntry"
                }
              }
            }
          }
        }
      },
      "SiteContainerEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteContainer"
          }
        }
      },
      "SiteContainer": {
        "required": [
          "folderId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          }
        }
      },
      "SiteMembershipBodyCreate": {
        "required": [
          "id",
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SiteMembershipBodyUpdate": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          }
        }
      },
      "SiteMemberPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteMemberEntry"
                }
              }
            }
          }
        }
      },
      "SiteMemberEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteMember"
          }
        }
      },
      "SiteMember": {
        "required": [
          "id",
          "person",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          },
          "isMemberOfGroup": {
            "type": "boolean"
          }
        }
      },
      "SiteGroupPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteGroupEntry"
                }
              }
            }
          }
        }
      },
      "SiteGroupEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteGroup"
          }
        }
      },
      "SiteGroup": {
        "required": [
          "group",
          "id",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/GroupMember"
          },
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          }
        }
      },
      "SiteRolePaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteRoleEntry"
                }
              }
            }
          }
        }
      },
      "SiteRoleEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteRole"
          }
        }
      },
      "SiteRole": {
        "required": [
          "guid",
          "id",
          "role",
          "site"
        ],
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "id": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "SiteConsumer",
              "SiteCollaborator",
              "SiteContributor",
              "SiteManager"
            ]
          }
        }
      },
      "PersonBodyCreate": {
        "required": [
          "email",
          "firstName",
          "id",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "skypeId": {
            "type": "string"
          },
          "googleId": {
            "type": "string"
          },
          "instantMessageId": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "mobile": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "userStatus": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "emailNotificationsEnabled": {
            "type": "boolean",
            "default": true
          },
          "password": {
            "type": "string"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "PersonBodyUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "skypeId": {
            "type": "string"
          },
          "googleId": {
            "type": "string"
          },
          "instantMessageId": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "mobile": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "userStatus": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "oldPassword": {
            "type": "string"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "PersonPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonEntry"
                }
              }
            }
          }
        }
      },
      "PersonEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "Person": {
        "required": [
          "email",
          "enabled",
          "firstName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "avatarId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "skypeId": {
            "type": "string"
          },
          "googleId": {
            "type": "string"
          },
          "instantMessageId": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "mobile": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "statusUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userStatus": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "default": true
          },
          "emailNotificationsEnabled": {
            "type": "boolean",
            "default": true
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          },
          "capabilities": {
            "$ref": "#/components/schemas/Capabilities"
          }
        }
      },
      "Company": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "telephone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "GroupPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupEntry"
                }
              }
            }
          }
        }
      },
      "GroupEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Group"
          }
        }
      },
      "Group": {
        "required": [
          "displayName",
          "id",
          "isRoot"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "isRoot": {
            "type": "boolean",
            "default": true
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "zones": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GroupMemberPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupMemberEntry"
                }
              }
            }
          }
        }
      },
      "GroupMemberEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/GroupMember"
          }
        }
      },
      "GroupMember": {
        "required": [
          "displayName",
          "id",
          "memberType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "memberType": {
            "type": "string",
            "enum": [
              "GROUP",
              "PERSON"
            ]
          }
        }
      },
      "GroupMembershipBodyCreate": {
        "required": [
          "id",
          "memberType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "memberType": {
            "type": "string",
            "enum": [
              "GROUP",
              "PERSON"
            ]
          }
        }
      },
      "GroupBodyCreate": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GroupBodyUpdate": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          }
        }
      },
      "CommentBody": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        }
      },
      "CommentPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommentEntry"
                }
              }
            }
          }
        }
      },
      "CommentEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "Comment": {
        "required": [
          "canDelete",
          "canEdit",
          "content",
          "createdAt",
          "createdBy",
          "edited",
          "id",
          "modifiedAt",
          "modifiedBy",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "edited": {
            "type": "boolean"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          }
        }
      },
      "TagBody": {
        "required": [
          "tag"
        ],
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          }
        }
      },
      "TagPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagEntry"
                }
              }
            }
          }
        }
      },
      "TagEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Tag"
          }
        }
      },
      "Tag": {
        "required": [
          "id",
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "count": {
            "type": "number"
          }
        }
      },
      "PersonNetworkPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonNetworkEntry"
                }
              }
            }
          }
        }
      },
      "PersonNetworkEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/PersonNetwork"
          }
        }
      },
      "PersonNetwork": {
        "required": [
          "id",
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This network's unique id"
          },
          "homeNetwork": {
            "type": "boolean",
            "description": "Is this the home network?"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "paidNetwork": {
            "type": "boolean"
          },
          "subscriptionLevel": {
            "type": "string",
            "enum": [
              "Free",
              "Standard",
              "Enterprise"
            ]
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkQuota"
            }
          }
        },
        "description": "A network is the group of users and sites that belong to an organization.\nNetworks are organized by email domain. When a user signs up for an\nAlfresco account , their email domain becomes their Home Network.\n"
      },
      "NetworkQuota": {
        "required": [
          "id",
          "limit",
          "usage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "usage": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Limits and usage of each quota. A network will have quotas for File space,\nthe number of sites in the network, the number of people in the network,\nand the number of network administrators\n"
      },
      "RatingBody": {
        "required": [
          "id",
          "myRating"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rating scheme type. Possible values are likes and fiveStar.",
            "default": "likes",
            "enum": [
              "likes",
              "fiveStar"
            ]
          },
          "myRating": {
            "type": "string",
            "description": "The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar"
          }
        }
      },
      "RatingPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RatingEntry"
                }
              }
            }
          }
        }
      },
      "RatingEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Rating"
          }
        }
      },
      "Rating": {
        "required": [
          "aggregate",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "aggregate": {
            "required": [
              "numberOfRatings"
            ],
            "type": "object",
            "properties": {
              "numberOfRatings": {
                "type": "integer"
              },
              "average": {
                "type": "integer"
              }
            }
          },
          "ratedAt": {
            "type": "string",
            "format": "date-time"
          },
          "myRating": {
            "type": "string",
            "description": "The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar."
          }
        },
        "description": "A person can rate an item of content by liking it. They can also remove\ntheir like of an item of content. API methods exist to get a list of\nratings and to add a new rating.\n"
      },
      "FavoriteBodyCreate": {
        "required": [
          "target"
        ],
        "type": "object",
        "properties": {
          "target": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "FavoritePaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FavoriteEntry"
                }
              }
            }
          }
        }
      },
      "FavoriteEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Favorite"
          }
        }
      },
      "Favorite": {
        "required": [
          "target",
          "targetGuid"
        ],
        "type": "object",
        "properties": {
          "targetGuid": {
            "type": "string",
            "description": "The guid of the object that is a favorite."
          },
          "createdAt": {
            "type": "string",
            "description": "The time the object was made a favorite.",
            "format": "date-time"
          },
          "target": {
            "type": "object",
            "properties": {}
          },
          "properties": {
            "type": "object",
            "properties": {},
            "description": "A subset of the target favorite properties, system properties and properties already available in the target are excluded."
          }
        },
        "description": "A favorite describes an Alfresco entity that a person has marked as a favorite.\nThe target can be a site, file or folder.\n"
      },
      "FavoriteSiteBodyCreate": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "FavoriteSiteEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/FavoriteSite"
          }
        }
      },
      "FavoriteSite": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "ActivityPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityEntry"
                }
              }
            }
          }
        }
      },
      "ActivityEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Activity"
          }
        }
      },
      "Activity": {
        "required": [
          "activityType",
          "feedPersonId",
          "id",
          "postPersonId"
        ],
        "type": "object",
        "properties": {
          "postPersonId": {
            "type": "string",
            "description": "The id of the person who performed the activity"
          },
          "id": {
            "type": "integer",
            "description": "The unique id of the activity",
            "format": "int64"
          },
          "siteId": {
            "type": "string",
            "description": "The unique id of the site on which the activity was performed"
          },
          "postedAt": {
            "type": "string",
            "description": "The date time at which the activity was performed",
            "format": "date-time"
          },
          "feedPersonId": {
            "type": "string",
            "description": "The feed on which this activity was posted"
          },
          "activitySummary": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An object summarizing the activity"
          },
          "activityType": {
            "type": "string",
            "description": "The type of the activity posted"
          }
        },
        "description": "Activities describe any past activity in a site,\nfor example creating an item of content, commenting on a node,\nliking an item of content.\n"
      },
      "PreferencePaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PreferenceEntry"
                }
              }
            }
          }
        }
      },
      "PreferenceEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Preference"
          }
        }
      },
      "Preference": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the preference"
          },
          "value": {
            "type": "string",
            "description": "The value of the preference. Note that this can be of any JSON type."
          }
        },
        "description": "A specific preference.\n"
      },
      "SiteMembershipRequestBodyUpdate": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "SiteMembershipRequestPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteMembershipRequestEntry"
                }
              }
            }
          }
        }
      },
      "SiteMembershipRequestEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteMembershipRequest"
          }
        }
      },
      "SiteMembershipRequest": {
        "required": [
          "createdAt",
          "id",
          "site"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SiteMembershipRequestWithPersonPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SiteMembershipRequestWithPersonEntry"
                }
              }
            }
          }
        }
      },
      "SiteMembershipRequestWithPersonEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SiteMembershipRequestWithPerson"
          }
        }
      },
      "SiteMembershipRequestWithPerson": {
        "required": [
          "createdAt",
          "id",
          "person",
          "site"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "SiteMembershipApprovalBody": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          }
        }
      },
      "SiteMembershipRejectionBody": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          }
        }
      },
      "UserInfo": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ContentInfo": {
        "required": [
          "mimeType"
        ],
        "type": "object",
        "properties": {
          "mimeType": {
            "type": "string"
          },
          "mimeTypeName": {
            "type": "string"
          },
          "sizeInBytes": {
            "type": "integer",
            "format": "int64"
          },
          "encoding": {
            "type": "string"
          }
        }
      },
      "AssociationInfo": {
        "required": [
          "assocType"
        ],
        "type": "object",
        "properties": {
          "assocType": {
            "type": "string"
          }
        }
      },
      "AssociationBody": {
        "required": [
          "assocType",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string"
          },
          "assocType": {
            "type": "string"
          }
        }
      },
      "ChildAssociationInfo": {
        "required": [
          "assocType",
          "isPrimary"
        ],
        "type": "object",
        "properties": {
          "assocType": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean"
          }
        }
      },
      "ChildAssociationBody": {
        "required": [
          "assocType",
          "childId"
        ],
        "type": "object",
        "properties": {
          "childId": {
            "type": "string"
          },
          "assocType": {
            "type": "string"
          }
        }
      },
      "PathElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nodeType": {
            "type": "string"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PathInfo": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PathElement"
            }
          },
          "name": {
            "type": "string"
          },
          "isComplete": {
            "type": "boolean"
          }
        }
      },
      "PermissionElement": {
        "type": "object",
        "properties": {
          "authorityId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accessStatus": {
            "type": "string",
            "default": "ALLOWED",
            "enum": [
              "ALLOWED",
              "DENIED"
            ]
          }
        }
      },
      "PermissionsInfo": {
        "type": "object",
        "properties": {
          "isInheritanceEnabled": {
            "type": "boolean"
          },
          "inherited": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionElement"
            }
          },
          "locallySet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionElement"
            }
          },
          "settable": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionsBody": {
        "type": "object",
        "properties": {
          "isInheritanceEnabled": {
            "type": "boolean"
          },
          "locallySet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionElement"
            }
          }
        }
      },
      "NodeBodyCreate": {
        "required": [
          "name",
          "nodeType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          },
          "nodeType": {
            "type": "string"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsBody"
          },
          "definition": {
            "$ref": "#/components/schemas/Definition"
          },
          "relativePath": {
            "type": "string"
          },
          "association": {
            "type": "object",
            "properties": {
              "assocType": {
                "type": "string"
              }
            }
          },
          "secondaryChildren": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChildAssociationBody"
            }
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationBody"
            }
          }
        }
      },
      "NodeBodyUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          },
          "nodeType": {
            "type": "string"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsBody"
          }
        }
      },
      "NodeBodyCopy": {
        "required": [
          "targetParentId"
        ],
        "type": "object",
        "properties": {
          "targetParentId": {
            "type": "string"
          },
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          }
        }
      },
      "NodeBodyMove": {
        "required": [
          "targetParentId"
        ],
        "type": "object",
        "properties": {
          "targetParentId": {
            "type": "string"
          },
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          }
        }
      },
      "NodeBodyLock": {
        "type": "object",
        "properties": {
          "timeToExpire": {
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "type": "string",
            "default": "ALLOW_OWNER_CHANGES",
            "enum": [
              "ALLOW_OWNER_CHANGES",
              "FULL"
            ]
          },
          "lifetime": {
            "type": "string",
            "default": "PERSISTENT",
            "enum": [
              "PERSISTENT",
              "EPHEMERAL"
            ]
          }
        }
      },
      "NodePaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeEntry"
                }
              },
              "source": {
                "$ref": "#/components/schemas/Node"
              }
            }
          }
        }
      },
      "NodeAssociationPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeAssociationEntry"
                }
              },
              "source": {
                "$ref": "#/components/schemas/Node"
              }
            }
          }
        }
      },
      "NodeChildAssociationPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeChildAssociationEntry"
                }
              },
              "source": {
                "$ref": "#/components/schemas/Node"
              }
            }
          }
        }
      },
      "NodeAssociationEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/NodeAssociation"
          }
        }
      },
      "NodeAssociation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Node"
          },
          {
            "type": "object",
            "properties": {
              "association": {
                "$ref": "#/components/schemas/AssociationInfo"
              }
            }
          }
        ]
      },
      "NodeChildAssociationEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/NodeChildAssociation"
          }
        }
      },
      "NodeChildAssociation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Node"
          },
          {
            "type": "object",
            "properties": {
              "association": {
                "$ref": "#/components/schemas/ChildAssociationInfo"
              }
            }
          }
        ]
      },
      "AssociationEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Association"
          }
        }
      },
      "Association": {
        "required": [
          "assocType",
          "targetId"
        ],
        "type": "object",
        "properties": {
          "targetId": {
            "type": "string"
          },
          "assocType": {
            "type": "string"
          }
        }
      },
      "ChildAssociationEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/ChildAssociation"
          }
        }
      },
      "ChildAssociation": {
        "required": [
          "assocType",
          "childId"
        ],
        "type": "object",
        "properties": {
          "childId": {
            "type": "string"
          },
          "assocType": {
            "type": "string"
          }
        }
      },
      "NodeEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Node"
          }
        }
      },
      "Node": {
        "required": [
          "createdAt",
          "createdByUser",
          "id",
          "isFile",
          "isFolder",
          "modifiedAt",
          "modifiedByUser",
          "name",
          "nodeType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          },
          "nodeType": {
            "type": "string"
          },
          "isFolder": {
            "type": "boolean"
          },
          "isFile": {
            "type": "boolean"
          },
          "isLocked": {
            "type": "boolean",
            "default": false
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "parentId": {
            "type": "string"
          },
          "isLink": {
            "type": "boolean"
          },
          "isFavorite": {
            "type": "boolean"
          },
          "content": {
            "$ref": "#/components/schemas/ContentInfo"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          },
          "allowableOperations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "path": {
            "$ref": "#/components/schemas/PathInfo"
          },
          "permissions": {
            "$ref": "#/components/schemas/PermissionsInfo"
          },
          "definition": {
            "$ref": "#/components/schemas/Definition"
          }
        }
      },
      "ProbeEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "required": [
              "message"
            ],
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "DirectAccessUrlBodyCreate": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "validFor": {
            "minimum": 1,
            "type": "integer",
            "description": "The length of time in seconds that the url is valid for.\n"
          }
        }
      },
      "SharedLinkBodyCreate": {
        "required": [
          "nodeId"
        ],
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SharedLinkBodyEmail": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "recipientEmails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SharedLinkPaging": {
        "required": [
          "list"
        ],
        "type": "object",
        "properties": {
          "list": {
            "required": [
              "entries",
              "pagination"
            ],
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SharedLinkEntry"
                }
              }
            }
          }
        }
      },
      "SharedLinkEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/SharedLink"
          }
        }
      },
      "SharedLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "nodeId": {
            "type": "string"
          },
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "sharedByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "content": {
            "$ref": "#/components/schemas/ContentInfo"
          },
          "allowableOperations": {
            "type": "array",
            "description": "The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the\nallowable operations pertaining to the linked content node.\n",
            "items": {
              "type": "string"
            }
          },
          "allowableOperationsOnTarget": {
            "type": "array",
            "description": "The allowable operations for the content node being shared.\n",
            "items": {
              "type": "string"
            }
          },
          "isFavorite": {
            "type": "boolean"
          },
          "properties": {
            "type": "object",
            "properties": {},
            "description": "A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded.\n"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "path": {
            "$ref": "#/components/schemas/PathInfo"
          }
        }
      },
      "RenditionBodyCreate": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "RenditionEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Rendition"
          }
        }
      },
      "Rendition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/ContentInfo"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "NOT_CREATED"
            ]
          }
        }
      },
      "RenditionPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RenditionEntry"
                }
              }
            }
          }
        }
      },
      "DeletedNodesPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeletedNodeEntry"
                }
              }
            }
          }
        }
      },
      "DeletedNodeEntry": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/DeletedNode"
          }
        }
      },
      "DeletedNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Node"
          },
          {
            "required": [
              "archivedAt",
              "archivedByUser"
            ],
            "type": "object",
            "properties": {
              "archivedByUser": {
                "$ref": "#/components/schemas/UserInfo"
              },
              "archivedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "DeletedNodeBodyRestore": {
        "type": "object",
        "properties": {
          "targetParentId": {
            "type": "string"
          },
          "assocType": {
            "type": "string"
          }
        }
      },
      "RevertBody": {
        "type": "object",
        "properties": {
          "majorVersion": {
            "type": "boolean"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "VersionPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VersionEntry"
                }
              }
            }
          }
        }
      },
      "VersionEntry": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Version": {
        "required": [
          "id",
          "isFile",
          "isFolder",
          "modifiedAt",
          "modifiedByUser",
          "name",
          "nodeType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "versionComment": {
            "type": "string"
          },
          "name": {
            "pattern": "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))",
            "type": "string",
            "description": "The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.\nThe character . must not be used at the end of the name.\n"
          },
          "nodeType": {
            "type": "string"
          },
          "isFolder": {
            "type": "boolean"
          },
          "isFile": {
            "type": "boolean"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "content": {
            "$ref": "#/components/schemas/ContentInfo"
          },
          "aspectNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "DownloadBodyCreate": {
        "required": [
          "nodeIds"
        ],
        "type": "object",
        "properties": {
          "nodeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DownloadEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/Download"
          }
        }
      },
      "Download": {
        "type": "object",
        "properties": {
          "filesAdded": {
            "type": "integer",
            "description": "number of files added so far in the zip"
          },
          "bytesAdded": {
            "type": "integer",
            "description": "number of bytes added so far in the zip"
          },
          "id": {
            "type": "string",
            "description": "the id of the download node"
          },
          "totalFiles": {
            "type": "integer",
            "description": "the total number of files to be added in the zip"
          },
          "totalBytes": {
            "type": "integer",
            "description": "the total number of bytes to be added in the zip"
          },
          "status": {
            "type": "string",
            "description": "the current status of the download node creation",
            "default": "PENDING",
            "enum": [
              "PENDING",
              "CANCELLED",
              "IN_PROGRESS",
              "DONE",
              "MAX_CONTENT_SIZE_EXCEEDED"
            ]
          }
        }
      },
      "ClientBody": {
        "required": [
          "client"
        ],
        "type": "object",
        "properties": {
          "client": {
            "type": "string",
            "description": "the client name"
          }
        }
      },
      "PasswordResetBody": {
        "required": [
          "id",
          "key",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "the new password"
          },
          "id": {
            "type": "string",
            "description": "the workflow id provided in the reset password email"
          },
          "key": {
            "type": "string",
            "description": "the workflow key provided in the reset password email"
          }
        }
      },
      "AuditAppPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuditAppEntry"
                }
              }
            }
          }
        }
      },
      "AuditAppEntry": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/AuditApp"
          }
        }
      },
      "AuditApp": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean",
            "default": true
          },
          "maxEntryId": {
            "type": "integer"
          },
          "minEntryId": {
            "type": "integer"
          }
        }
      },
      "AuditBodyUpdate": {
        "type": "object",
        "properties": {
          "isEnabled": {
            "type": "boolean"
          }
        }
      },
      "AuditEntryPaging": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuditEntryEntry"
                }
              }
            }
          }
        }
      },
      "AuditEntryEntry": {
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/AuditEntry"
          }
        }
      },
      "AuditEntry": {
        "required": [
          "auditApplicationId",
          "createdAt",
          "createdByUser",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "auditApplicationId": {
            "type": "string"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "values": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "ActionDefinitionList": {
        "type": "object",
        "properties": {
          "list": {
            "type": "object",
            "properties": {
              "pagination": {
                "$ref": "#/components/schemas/Pagination"
              },
              "entries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActionDefinition"
                }
              }
            }
          }
        }
      },
      "ActionDefinitionEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/ActionDefinition"
          }
        }
      },
      "ActionDefinition": {
        "required": [
          "applicableTypes",
          "id",
          "trackStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the action definition â€” used for example when executing an action"
          },
          "name": {
            "type": "string",
            "description": "name of the action definition, e.g. \"move\""
          },
          "title": {
            "type": "string",
            "description": "title of the action definition, e.g. \"Move\""
          },
          "description": {
            "type": "string",
            "description": "describes the action definition, e.g. \"This will move the matched item to another space.\""
          },
          "applicableTypes": {
            "type": "array",
            "description": "QNames of the types this action applies to",
            "items": {
              "type": "string"
            }
          },
          "trackStatus": {
            "type": "boolean",
            "description": "whether the basic action definition supports action tracking or not"
          },
          "parameterDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionParameterDefinition"
            }
          }
        }
      },
      "ActionParameterDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "multiValued": {
            "type": "boolean"
          },
          "mandatory": {
            "type": "boolean"
          },
          "displayLabel": {
            "type": "string"
          }
        }
      },
      "ActionBodyExec": {
        "required": [
          "actionDefinitionId"
        ],
        "type": "object",
        "properties": {
          "actionDefinitionId": {
            "type": "string"
          },
          "targetId": {
            "type": "string",
            "description": "The entity upon which to execute the action, typically a node ID or similar."
          },
          "params": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "ActionExecResultEntry": {
        "required": [
          "entry"
        ],
        "type": "object",
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/ActionExecResult"
          }
        }
      },
      "ActionExecResult": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the action pending execution"
          }
        }
      },
      "Definition": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "List of property definitions effective for this node as the result of combining the type with all aspects.",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "Property": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "the human-readable title"
          },
          "description": {
            "type": "string",
            "description": "the human-readable description"
          },
          "defaultValue": {
            "type": "string",
            "description": "the default value"
          },
          "dataType": {
            "type": "string",
            "description": "the name of the property type (e.g. d:text)"
          },
          "isMultiValued": {
            "type": "boolean",
            "description": "define if the property is multi-valued"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "define if the property is mandatory"
          },
          "isMandatoryEnforced": {
            "type": "boolean",
            "description": "define if the presence of mandatory properties is enforced"
          },
          "isProtected": {
            "type": "boolean",
            "description": "define if the property is system maintained"
          },
          "constraints": {
            "type": "array",
            "description": "list of constraints defined for the property",
            "items": {
              "$ref": "#/components/schemas/Constraint"
            }
          }
        }
      },
      "Constraint": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "the type of the constraint"
          },
          "title": {
            "type": "string",
            "description": "the human-readable constraint title"
          },
          "description": {
            "type": "string",
            "description": "the human-readable constraint description"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "parameters": {
      "actionDefinitionIdParam": {
        "name": "actionDefinitionId",
        "in": "path",
        "description": "The identifier of an action definition.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeIdParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeIdWithAliasParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeParentIdParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a parent node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeParentIdWithAliasParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a parent node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeChildIdWithAliasParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a child node. You can also use one of these well-known aliases:\n* -my-\n* -shared-\n* -root-\n",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeSourceIdParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a source node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeTargetIdParam": {
        "name": "nodeId",
        "in": "path",
        "description": "The identifier of a target node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "nodeMinimalEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n* permissions\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "nodeAssocMinimalEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* aspectNames\n* isLink\n* isFavorite\n* isLocked\n* path\n* properties\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "nodeEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the node. The following optional fields can be requested:\n* allowableOperations\n* association\n* isLink\n* isFavorite\n* isLocked\n* path\n* permissions\n* definition\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "groupEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the group. The following optional fields can be requested:\n* parentIds\n* zones\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "personMinimalEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the person. The following optional fields can be requested:\n* properties\n* aspectNames\n* capabilities\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "tagEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the tag. The following optional fields can be requested:\n* count\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "sharedIdParam": {
        "name": "sharedId",
        "in": "path",
        "description": "The identifier of a shared link to a file.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sharedLinkEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the shared link, the following optional fields can be requested:\n* allowableOperations\n* path\n* properties\n* isFavorite\n* aspectNames\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "renditionIdParam": {
        "name": "renditionId",
        "in": "path",
        "description": "The name of a thumbnail rendition, for example *doclib*, or *pdf*.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "versionIdParam": {
        "name": "versionId",
        "in": "path",
        "description": "The identifier of a version, ie. version label, within the version history of a node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "versionMinimalEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the version node. The following optional fields can be requested:\n* properties\n* aspectNames\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "personIdParam": {
        "name": "personId",
        "in": "path",
        "description": "The identifier of a person.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "groupIdParam": {
        "name": "groupId",
        "in": "path",
        "description": "The identifier of a group.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "groupMemberIdParam": {
        "name": "groupMemberId",
        "in": "path",
        "description": "The identifier of a person or group.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "siteIdParam": {
        "name": "siteId",
        "in": "path",
        "description": "The identifier of a site.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "inviteeIdParam": {
        "name": "inviteeId",
        "in": "path",
        "description": "The invitee user name.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tagIdParam": {
        "name": "tagId",
        "in": "path",
        "description": "The identifier of a tag.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "networkIdParam": {
        "name": "networkId",
        "in": "path",
        "description": "The identifier of a network.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "commentIdParam": {
        "name": "commentId",
        "in": "path",
        "description": "The identifier of a comment.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ratingIdParam": {
        "name": "ratingId",
        "in": "path",
        "description": "The identifier of a rating.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "favoriteIdParam": {
        "name": "favoriteId",
        "in": "path",
        "description": "The identifier of a favorite.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "skipCountParam": {
        "name": "skipCount",
        "in": "query",
        "description": "The number of entities that exist in the collection before those included in this list.\nIf not supplied then the default value is 0.\n",
        "schema": {
          "minimum": 0,
          "type": "integer",
          "default": 0
        }
      },
      "omitTotalItemsParam": {
        "name": "omitTotalItems",
        "in": "query",
        "description": "A boolean to control if the response provides the total numbers of items in the collection.\nIf not supplied then the default value is false.\n",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "maxItemsParam": {
        "name": "maxItems",
        "in": "query",
        "description": "The maximum number of items to return in the list.\nIf not supplied then the default value is 100.\n",
        "schema": {
          "minimum": 1,
          "type": "integer",
          "default": 100
        }
      },
      "fieldsParam": {
        "name": "fields",
        "in": "query",
        "description": "A list of field names.\n\nYou can use this parameter to restrict the fields\nreturned within a response if, for example, you want to save on overall bandwidth.\n\nThe list applies to a returned individual\nentity or entries within a collection.\n\nIf the API method also supports the **include**\nparameter, then the fields specified in the **include**\nparameter are returned in addition to those specified in the **fields** parameter.\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "orderByParam": {
        "name": "orderBy",
        "in": "query",
        "description": "A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to\nsort the list by one or more fields.\n\nEach field has a default sort order, which is normally ascending order. Read the API method implementation notes\nabove to check if any fields used in this method have a descending default search order.\n\nTo sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "whereParam": {
        "name": "where",
        "in": "query",
        "description": "A string to restrict the returned objects by using a predicate.",
        "schema": {
          "type": "string"
        }
      },
      "includeSourceParam": {
        "name": "includeSource",
        "in": "query",
        "description": "Also include **source** (in addition to **entries**) with folder information on **nodeId**",
        "schema": {
          "type": "boolean"
        }
      },
      "relationsParam": {
        "name": "relations",
        "in": "query",
        "description": "Use the relations parameter to include one or more related entities in a single response.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "attachmentParam": {
        "name": "attachment",
        "in": "query",
        "description": "**true** enables a web browser to download the file as an attachment.\n**false** means a web browser may preview the file in a new tab or window, but not\ndownload the file.\n\nYou can only set this parameter to **false** if the content type of the file is in the supported list;\nfor example, certain image files and PDF files.\n\nIf the content type is not supported for preview, then a value of **false**  is ignored, and\nthe attachment will be returned in the response.\n",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "ifModifiedSinceHeader": {
        "name": "If-Modified-Since",
        "in": "header",
        "description": "Only returns the content if it has been modified since the date provided.\nUse the date format defined by HTTP. For example, `Wed, 09 Mar 2016 16:56:34 GMT`.\n",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "RangeHeader": {
        "name": "Range",
        "in": "header",
        "description": "The Range header indicates the part of a document that the server should return.\nSingle part request supported, for example: bytes=1-10.\n",
        "schema": {
          "type": "string",
          "format": "bytes"
        }
      },
      "downloadIdParam": {
        "name": "downloadId",
        "in": "path",
        "description": "The identifier of a download node.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "favoriteEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about favorites, the following optional fields can be requested:\n* path (note, this only applies to files and folders)\n* properties\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "auditApplicationIdParam": {
        "name": "auditApplicationId",
        "in": "path",
        "description": "The identifier of an audit application.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "auditApplicationIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested:\n* max\n* min\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "auditEntryIdParam": {
        "name": "auditEntryId",
        "in": "path",
        "description": "The identifier of an audit entry.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "auditMinimalEntryIncludeParam": {
        "name": "include",
        "in": "query",
        "description": "Returns additional information about the audit entry. The following optional fields can be requested:\n* values\n",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "HTTP Basic Authentication",
        "scheme": "basic"
      }
    }
  }
}