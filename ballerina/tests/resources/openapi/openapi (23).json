{
  "openapi": "3.0.1",
  "info": {
    "x-ballerina-display": {
      "label": "Azure Anomaly Detector",
      "iconPath": "icon.png"
    },
    "title": "Anomaly Detector",
    "description": "This is a generated connector for [Azure Anomaly Detector API v1](https://azure.microsoft.com/en-us/services/cognitive-services/anomaly-detector/) OpenAPI specification.\n\"The Anomaly Detection service detects anomalies automatically in time\\ \\ series data. It supports several functionalities, \\r\\none is for detecting the\\ \\ whole series with model trained by the time series, another is detecting the\\ \\ last point \\r\\nwith model trained by points before. With this service, business\\ \\ customers can discover incidents and establish \\r\\na logic flow for root cause\\ \\ analysis. We also provide change point detection, which is another common scenario\\ \\ on \\r\\ntime series analysis and service monitoring. Change point detection targets\\ \\ to discover tend changes in the time series.\\r\\nTo ensure online service quality\\ \\ is one of the main reasons we developed this service. Our team is dedicated\\ \\ to \\r\\ncontinuing to improve the anomaly detection service to provide precise\\ \\ results.\"\n",
    "x-ballerina-init-description": "The connector initialization requires setting the API credentials.\nCreate a [Azure Anomaly Detector account](https://azure.microsoft.com/en-us/services/cognitive-services/anomaly-detector/) and  obtain API key following [this guide](https://docs.microsoft.com/en-us/azure/search/search-security-api-keys).\n",
    "version": "v1.0"
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "tags": [],
  "paths": {
    "/timeseries/last/detect": {
      "post": {
        "summary": "Detect anomaly status of the latest point in time series.",
        "description": "This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting matches the scenario of real-time monitoring of business metrics.",
        "operationId": "post-timeseries-last-detect",
        "requestBody": {
          "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LastResponse"
                },
                "example": "{\r\n  \"isAnomaly\": false,\r\n  \"isPositiveAnomaly\": false,\r\n  \"isNegativeAnomaly\": false,\r\n  \"period\": 12,\r\n  \"expectedValue\": 809.2328084659704,\r\n  \"upperMargin\": 40.46164042329852,\r\n  \"lowerMargin\": 40.46164042329852,\r\n  \"suggestedWindow\": 49\r\n}"
              }
            }
          },
          "400": {
            "description": "Possible Errors:\r\n<ul>\r\n<li><b>BadArgument</b>\r\n<br/>Invalid json format, input data is Empty.\r\n<br/>The 'series' field is required in request.\r\n<br/>The 'granularity' field is required in request.\r\n<br/>The 'series' field cannot be empty.\r\n<br/>The 'series' field must be array/list type.\r\n<br/>'timestamp' or 'value' is malformed in 'series' Field.\r\n<br/>The 'series' field cannot have none values.\r\n</li>\r\n<li><b>InvalidCustomInterval</b>\r\n<br/>The 'customInterval' field must be an integer > 0.\r\n</li>\r\n<li><b>InvalidGranularity</b>\r\n<br/>The 'granularity' field can only be one of the following: ['daily', 'minutely', 'hourly', 'weekly', 'monthly', 'yearly', 'secondly'].\r\n</li>\r\n<li><b>InvalidPeriod</b>\r\n<br/>The 'period' field must be an integer >= 0.\r\n</li>\r\n<li><b>InvalidModelArgument</b>\r\n<br/>The 'maxAnomalyRatio' field must be less than 50% of the series points (0 < maxAnomalyRatio < 0.5).\r\n<br/>The 'sensitivity' field must be an integer between 0 and 99.\r\n<br/>The 'series' field must have more than 2 periods points.\r\n</li>\r\n<li><b>InvalidSeries</b>\r\n<br/>The 'series' field must be sorted by timestamp in ascending order.\r\n<br/>The 'series' field cannot have duplicated timestamp.\r\n<br/>Time points should be uniformly spaced in time in minutely granularity with 1 gran as interval, \r\nratio of missing points should be less than 10%.\r\n<br/>The 'series' field must have at least 12 points.\r\n<br/>The 'series' field cannot have more than 8640 points.\r\n</li>\r\n</ul>",
            "content": {
              "application/json": {
                "example": "{\r\n  \"code\" : \"InvalidSeries\",\r\n  \"message\" : \"The 'series' field cannot have duplicated timestamp.\"\r\n}"
              }
            }
          },
          "403": {
            "description": "The certificate you provided is not accepted by server.",
            "content": {}
          },
          "405": {
            "description": "Method Not Allowed.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/timeseries/entire/detect": {
      "post": {
        "summary": "Find anomalies for the entire series in batch.",
        "description": "This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give the user an overall status of the time series.",
        "operationId": "post-timeseries-entire-detect",
        "requestBody": {
          "description": "Time series points and period if needed. Advanced model parameters can also be set in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Request"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntireDetectResponse"
                },
                "example": "{\r\n  \"expectedValues\": [\r\n    827.7940908243968,\r\n    798.9133774671927,\r\n    888.6058431807189,\r\n    900.5606407986661,\r\n    962.8389426378304,\r\n    933.2591606306954,\r\n    891.0784104799666,\r\n    856.1781601363697,\r\n    809.8987227908941,\r\n    807.375129007505,\r\n    764.3196682448518,\r\n    803.933498594564,\r\n    823.5900620883058,\r\n    794.0905641334288,\r\n    883.164245249282,\r\n    894.8419000690953,\r\n    956.8430591101258,\r\n    927.6285055190114,\r\n    885.812983784303,\r\n    851.6424797402517,\r\n    806.0927886943216,\r\n    804.6826815312029,\r\n    762.74070738882,\r\n    804.0251702513732,\r\n    825.3523662579559,\r\n    798.0404188724976,\r\n    889.3016505577698,\r\n    902.4226124345937,\r\n    965.867078532635,\r\n    937.3200495736695,\r\n    896.1720524711102,\r\n    862.0087368413656,\r\n    816.4662342097423,\r\n    814.4297745524709,\r\n    771.8614479159354,\r\n    811.859271346729,\r\n    831.8998279215521,\r\n    802.947544797165,\r\n    892.5684407435083,\r\n    904.5488214533809,\r\n    966.8527063844707,\r\n    937.3168391003043,\r\n    895.180003672544,\r\n    860.3649596356635,\r\n    814.1707285969043,\r\n    811.9054862686213,\r\n    769.1083769610742,\r\n    809.2328084659704\r\n  ],\r\n  \"upperMargins\": [\r\n    41.389704541219835,\r\n    39.94566887335964,\r\n    44.43029215903594,\r\n    45.02803203993331,\r\n    48.14194713189152,\r\n    46.66295803153477,\r\n    44.55392052399833,\r\n    42.808908006818484,\r\n    40.494936139544706,\r\n    40.36875645037525,\r\n    38.215983412242586,\r\n    40.196674929728196,\r\n    41.17950310441529,\r\n    39.70452820667144,\r\n    44.1582122624641,\r\n    44.74209500345477,\r\n    47.84215295550629,\r\n    46.38142527595057,\r\n    44.290649189215145,\r\n    42.58212398701258,\r\n    40.30463943471608,\r\n    40.234134076560146,\r\n    38.137035369441,\r\n    40.201258512568664,\r\n    41.267618312897795,\r\n    39.90202094362488,\r\n    44.46508252788849,\r\n    45.121130621729684,\r\n    48.29335392663175,\r\n    46.86600247868348,\r\n    44.80860262355551,\r\n    43.100436842068284,\r\n    40.82331171048711,\r\n    40.721488727623544,\r\n    38.593072395796774,\r\n    40.59296356733645,\r\n    41.5949913960776,\r\n    40.14737723985825,\r\n    44.62842203717541,\r\n    45.227441072669045,\r\n    48.34263531922354,\r\n    46.86584195501521,\r\n    44.759000183627194,\r\n    43.01824798178317,\r\n    40.70853642984521,\r\n    40.59527431343106,\r\n    38.45541884805371,\r\n    40.46164042329852\r\n  ],\r\n  \"lowerMargins\": [\r\n    41.389704541219835,\r\n    39.94566887335964,\r\n    44.43029215903594,\r\n    45.02803203993331,\r\n    48.14194713189152,\r\n    46.66295803153477,\r\n    44.55392052399833,\r\n    42.808908006818484,\r\n    40.494936139544706,\r\n    40.36875645037525,\r\n    38.215983412242586,\r\n    40.196674929728196,\r\n    41.17950310441529,\r\n    39.70452820667144,\r\n    44.1582122624641,\r\n    44.74209500345477,\r\n    47.84215295550629,\r\n    46.38142527595057,\r\n    44.290649189215145,\r\n    42.58212398701258,\r\n    40.30463943471608,\r\n    40.234134076560146,\r\n    38.137035369441,\r\n    40.201258512568664,\r\n    41.267618312897795,\r\n    39.90202094362488,\r\n    44.46508252788849,\r\n    45.121130621729684,\r\n    48.29335392663175,\r\n    46.86600247868348,\r\n    44.80860262355551,\r\n    43.100436842068284,\r\n    40.82331171048711,\r\n    40.721488727623544,\r\n    38.593072395796774,\r\n    40.59296356733645,\r\n    41.5949913960776,\r\n    40.14737723985825,\r\n    44.62842203717541,\r\n    45.227441072669045,\r\n    48.34263531922354,\r\n    46.86584195501521,\r\n    44.759000183627194,\r\n    43.01824798178317,\r\n    40.70853642984521,\r\n    40.59527431343106,\r\n    38.45541884805371,\r\n    40.46164042329852\r\n  ],\r\n  \"isAnomaly\": [\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false\r\n  ],\r\n  \"isPositiveAnomaly\": [\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false\r\n  ],\r\n  \"isNegativeAnomaly\": [\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false\r\n  ],\r\n  \"period\": 12\r\n}"
              }
            }
          },
          "400": {
            "description": "Possible Errors:\r\n<ul>\r\n<li><b>BadArgument</b>\r\n<br/>Invalid json format, input data is Empty.\r\n<br/>The 'series' field is required in request.\r\n<br/>The 'granularity' field is required in request.\r\n<br/>The 'series' field cannot be empty.\r\n<br/>The 'series' field must be array/list type.\r\n<br/>'timestamp' or 'value' is malformed in 'series' Field.\r\n<br/>The 'series' field cannot have none values.\r\n</li>\r\n<li><b>InvalidCustomInterval</b>\r\n<br/>The 'customInterval' field must be an integer > 0.\r\n</li>\r\n<li><b>InvalidGranularity</b>\r\n<br/>The 'granularity' field can only be one of the following: ['daily', 'minutely', 'hourly', 'weekly', 'monthly', 'yearly', 'secondly'].\r\n</li>\r\n<li><b>InvalidPeriod</b>\r\n<br/>The 'period' field must be an integer >= 0.\r\n</li>\r\n<li><b>InvalidModelArgument</b>\r\n<br/>The 'maxAnomalyRatio' field must be less than 50% of the series points (0 < maxAnomalyRatio < 0.5).\r\n<br/>The 'sensitivity' field must be an integer between 0 and 99.\r\n<br/>The 'series' field must have more than 2 periods points.\r\n</li>\r\n<li><b>InvalidSeries</b>\r\n<br/>The 'series' field must be sorted by timestamp in ascending order.\r\n<br/>The 'series' field cannot have duplicated timestamp.\r\n<br/>Time points should be uniformly spaced in time in minutely granularity with 1 gran as interval, \r\nratio of missing points should be less than 10%.\r\n<br/>The 'series' field must have at least 12 points.\r\n<br/>The 'series' field cannot have more than 8640 points.\r\n</li>\r\n</ul>",
            "content": {
              "application/json": {
                "example": "{\r\n  \"code\" : \"InvalidSeries\",\r\n  \"message\" : \"The 'series' field cannot be empty.\"\r\n}"
              }
            }
          },
          "403": {
            "description": "The certificate you provided is not accepted by server.",
            "content": {}
          },
          "405": {
            "description": "Method Not Allowed.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/timeseries/changepoint/detect": {
      "post": {
        "summary": "Find trend change point for the entire series in batch.",
        "description": "This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is a trend change point. The entire detection can detect all trend change points of the time series.",
        "operationId": "post-timeseries-changepoint-detect",
        "requestBody": {
          "description": "Time series points, granularity should be set in the request. Advanced model parameters can also be set in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePointDetectRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePointDetectResponse"
                },
                "example": "{\r\n  \"confidenceScores\": [\r\n    0,\r\n    0,\r\n    0.00009806187784391992,\r\n    0.0018271196069162686,\r\n    0.0024024970102579477,\r\n    0.0006698841513929579,\r\n    0.005241021191331318,\r\n    0.005608371938773833,\r\n    0.0002582967339394681,\r\n    0.0028641957214850305,\r\n    0.0002086271545768578,\r\n    0.002872596645208636,\r\n    0.0038254365621415275,\r\n    0.0037871087975867787,\r\n    0.002551692781278267,\r\n    0.002795581501682331,\r\n    0.004242681998535293,\r\n    0.0001668205733865953,\r\n    0.0033500664222602655,\r\n    0.0004736963490890601,\r\n    0.0010909427701544395,\r\n    0.004416975679466235,\r\n    0.32811393206802303,\r\n    3.3969062736306306e-15,\r\n    0.0014439526026416374,\r\n    0.0026356798731345843,\r\n    0.00035229328015416554,\r\n    0.0003425625371251363,\r\n    0.004252803662198847,\r\n    0.0026723666415576523,\r\n    0.01203658322275258,\r\n    0.0005797791524039205,\r\n    0.002973159734217919,\r\n    0.00563771188428345,\r\n    0.006702942334305688,\r\n    0.006560331486165724,\r\n    0.0023713364333307675,\r\n    0.28312612517142904,\r\n    3.3969062736306306e-15,\r\n    0.00006728693748012286,\r\n    0.007474321161820017,\r\n    0.0007402854911579185,\r\n    0.0021427717111760516,\r\n    0.0010456722259841228,\r\n    0.0006710836684717039,\r\n    0.004880561063393699,\r\n    0.007855787427509102,\r\n    0.00015617505084218866,\r\n    0.2230962081216851,\r\n    3.3969062736306306e-15,\r\n    0.00024255212249064555,\r\n    0.11668400494338521,\r\n    6.793812547261261e-15,\r\n    0.000014171670068597315,\r\n    0.0019566935039425576,\r\n    0.006387099509754672,\r\n    0.005234041196046256,\r\n    0.002723346117254897,\r\n    0.02386583326609911,\r\n    0.01847725899081154\r\n  ],\r\n  \"isChangePoint\": [\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false\r\n  ],\r\n  \"period\": 0\r\n}"
              }
            }
          },
          "400": {
            "description": "Possible Errors:\r\n<ul>\r\n<li><b>BadArgument</b>\r\n<br/>Invalid json format, input data is Empty.\r\n<br/>The 'series' field is required in request.\r\n<br/>The 'granularity' field is required in request.\r\n<br/>The 'series' field cannot be empty.\r\n<br/>The 'series' field must be array/list type.\r\n<br/>'timestamp' or 'value' is malformed in 'series' Field.\r\n<br/>The 'series' field cannot have none values.\r\n</li>\r\n<li><b>InvalidCustomInterval</b>\r\n<br/>The 'customInterval' field must be an integer > 0.\r\n</li>\r\n<li><b>InvalidGranularity</b>\r\n<br/>The 'granularity' field can only be one of the following: ['daily', 'minutely', 'hourly', 'weekly', 'monthly', 'yearly', 'secondly'].\r\n</li>\r\n<li><b>InvalidPeriod</b>\r\n<br/>The 'period' field must be an integer >= 0.\r\n</li>\r\n<li><b>InvalidModelArgument</b>\r\n<br/>The 'maxAnomalyRatio' field must be less than 50% of the series points (0 < maxAnomalyRatio < 0.5).\r\n<br/>The 'sensitivity' field must be an integer between 0 and 99.\r\n<br/>The 'series' field must have more than 2 periods points.\r\n</li>\r\n<li><b>InvalidSeries</b>\r\n<br/>The 'series' field must be sorted by timestamp in ascending order.\r\n<br/>The 'series' field cannot have duplicated timestamp.\r\n<br/>Time points should be uniformly spaced in time in minutely granularity with 1 gran as interval, \r\nratio of missing points should be less than 10%.\r\n<br/>The 'series' field must have at least 12 points.\r\n<br/>The 'series' field cannot have more than 8640 points.\r\n</li>\r\n</ul>",
            "content": {
              "application/json": {
                "example": "{\r\n  \"code\" : \"InvalidSeries\",\r\n  \"message\" : \"The 'series' field cannot be empty.\"\r\n}"
              }
            }
          },
          "403": {
            "description": "The certificate you provided is not accepted by server.",
            "content": {}
          },
          "405": {
            "description": "Method Not Allowed.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "changePointDetectRequest"
      }
    }
  },
  "components": {
    "schemas": {
      "Request": {
        "required": [
          "granularity",
          "series"
        ],
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "description": "Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.",
            "items": {
              "$ref": "#/components/schemas/Point"
            }
          },
          "granularity": {
            "type": "string",
            "description": "Can only be one of yearly, monthly, weekly, daily, hourly, minutely or secondly. Granularity is used for verify whether input series is valid.",
            "example": "daily"
          },
          "customInterval": {
            "type": "integer",
            "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
            "example": 5
          },
          "period": {
            "type": "integer",
            "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.",
            "format": "int32",
            "example": 7
          },
          "maxAnomalyRatio": {
            "type": "number",
            "description": "Optional argument, advanced model parameter, max anomaly ratio in a time series.",
            "format": "float",
            "example": 0.25
          },
          "sensitivity": {
            "type": "number",
            "description": "Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted",
            "format": "integer",
            "example": 95
          }
        },
        "example": "{ \r\n  \"series\": [\r\n  {\r\n    \"timestamp\": \"1972-01-01T00:00:00Z\",\r\n    \"value\": 826\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-02-01T00:00:00Z\",\r\n    \"value\": 799\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-03-01T00:00:00Z\",\r\n    \"value\": 890\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-04-01T00:00:00Z\",\r\n    \"value\": 900\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-05-01T00:00:00Z\",\r\n    \"value\": 961\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-06-01T00:00:00Z\",\r\n    \"value\": 935\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-07-01T00:00:00Z\",\r\n    \"value\": 894\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-08-01T00:00:00Z\",\r\n    \"value\": 855\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-09-01T00:00:00Z\",\r\n    \"value\": 809\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-10-01T00:00:00Z\",\r\n    \"value\": 810\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-11-01T00:00:00Z\",\r\n    \"value\": 766\r\n  },\r\n  {\r\n    \"timestamp\": \"1972-12-01T00:00:00Z\",\r\n    \"value\": 805\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-01-01T00:00:00Z\",\r\n    \"value\": 821\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-02-01T00:00:00Z\",\r\n    \"value\": 773\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-03-01T00:00:00Z\",\r\n    \"value\": 883\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-04-01T00:00:00Z\",\r\n    \"value\": 898\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-05-01T00:00:00Z\",\r\n    \"value\": 957\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-06-01T00:00:00Z\",\r\n    \"value\": 924\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-07-01T00:00:00Z\",\r\n    \"value\": 881\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-08-01T00:00:00Z\",\r\n    \"value\": 837\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-09-01T00:00:00Z\",\r\n    \"value\": 784\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-10-01T00:00:00Z\",\r\n    \"value\": 791\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-11-01T00:00:00Z\",\r\n    \"value\": 760\r\n  },\r\n  {\r\n    \"timestamp\": \"1973-12-01T00:00:00Z\",\r\n    \"value\": 802\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-01-01T00:00:00Z\",\r\n    \"value\": 828\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-02-01T00:00:00Z\",\r\n    \"value\": 1030\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-03-01T00:00:00Z\",\r\n    \"value\": 889\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-04-01T00:00:00Z\",\r\n    \"value\": 902\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-05-01T00:00:00Z\",\r\n    \"value\": 969\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-06-01T00:00:00Z\",\r\n    \"value\": 947\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-07-01T00:00:00Z\",\r\n    \"value\": 908\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-08-01T00:00:00Z\",\r\n    \"value\": 867\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-09-01T00:00:00Z\",\r\n    \"value\": 815\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-10-01T00:00:00Z\",\r\n    \"value\": 812\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-11-01T00:00:00Z\",\r\n    \"value\": 773\r\n  },\r\n  {\r\n    \"timestamp\": \"1974-12-01T00:00:00Z\",\r\n    \"value\": 813\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-01-01T00:00:00Z\",\r\n    \"value\": 834\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-02-01T00:00:00Z\",\r\n    \"value\": 782\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-03-01T00:00:00Z\",\r\n    \"value\": 892\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-04-01T00:00:00Z\",\r\n    \"value\": 903\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-05-01T00:00:00Z\",\r\n    \"value\": 966\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-06-01T00:00:00Z\",\r\n    \"value\": 937\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-07-01T00:00:00Z\",\r\n    \"value\": 896\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-08-01T00:00:00Z\",\r\n    \"value\": 858\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-09-01T00:00:00Z\",\r\n    \"value\": 817\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-10-01T00:00:00Z\",\r\n    \"value\": 827\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-11-01T00:00:00Z\",\r\n    \"value\": 797\r\n  },\r\n  {\r\n    \"timestamp\": \"1975-12-01T00:00:00Z\",\r\n    \"value\": 843\r\n  }\r\n  ],\r\n \"maxAnomalyRatio\": 0.25,\r\n \"sensitivity\": 95,\r\n \"granularity\": \"monthly\"\r\n}"
      },
      "Point": {
        "required": [
          "timestamp",
          "value"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp of a data point (ISO8601 format).",
            "format": "date-time",
            "example": "1972-01-01T00:00:00.000Z"
          },
          "value": {
            "type": "number",
            "description": "The measurement of that point, should be float.",
            "format": "float",
            "example": 826
          }
        }
      },
      "EntireDetectResponse": {
        "required": [
          "expectedValues",
          "isAnomaly",
          "isNegativeAnomaly",
          "isPositiveAnomaly",
          "lowerMargins",
          "period",
          "upperMargins"
        ],
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found.",
            "format": "int32",
            "example": 12
          },
          "expectedValues": {
            "type": "array",
            "description": "ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.",
            "example": [
              827.7940908243968,
              798.9133774671927,
              888.6058431807189,
              900.5606407986661,
              962.8389426378304,
              933.2591606306954,
              891.0784104799666,
              856.1781601363697,
              809.8987227908941,
              807.375129007505,
              764.3196682448518,
              803.933498594564,
              823.5900620883058,
              794.0905641334288,
              883.164245249282,
              894.8419000690953,
              956.8430591101258,
              927.6285055190114,
              885.812983784303,
              851.6424797402517,
              806.0927886943216,
              804.6826815312029,
              762.74070738882,
              804.0251702513732,
              825.3523662579559,
              798.0404188724976,
              889.3016505577698,
              902.4226124345937,
              965.867078532635,
              937.3200495736695,
              896.1720524711102,
              862.0087368413656,
              816.4662342097423,
              814.4297745524709,
              771.8614479159354,
              811.859271346729,
              831.8998279215521,
              802.947544797165,
              892.5684407435083,
              904.5488214533809,
              966.8527063844707,
              937.3168391003043,
              895.180003672544,
              860.3649596356635,
              814.1707285969043,
              811.9054862686213,
              769.1083769610742,
              809.2328084659704
            ],
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "upperMargins": {
            "type": "array",
            "description": "UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.",
            "example": [
              41.389704541219835,
              39.94566887335964,
              44.43029215903594,
              45.02803203993331,
              48.14194713189152,
              46.66295803153477,
              44.55392052399833,
              42.808908006818484,
              40.494936139544706,
              40.36875645037525,
              38.215983412242586,
              40.196674929728196,
              41.17950310441529,
              39.70452820667144,
              44.1582122624641,
              44.74209500345477,
              47.84215295550629,
              46.38142527595057,
              44.290649189215145,
              42.58212398701258,
              40.30463943471608,
              40.234134076560146,
              38.137035369441,
              40.201258512568664,
              41.267618312897795,
              39.90202094362488,
              44.46508252788849,
              45.121130621729684,
              48.29335392663175,
              46.86600247868348,
              44.80860262355551,
              43.100436842068284,
              40.82331171048711,
              40.721488727623544,
              38.593072395796774,
              40.59296356733645,
              41.5949913960776,
              40.14737723985825,
              44.62842203717541,
              45.227441072669045,
              48.34263531922354,
              46.86584195501521,
              44.759000183627194,
              43.01824798178317,
              40.70853642984521,
              40.59527431343106,
              38.45541884805371,
              40.46164042329852
            ],
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "lowerMargins": {
            "type": "array",
            "description": "LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.",
            "example": [
              41.389704541219835,
              39.94566887335964,
              44.43029215903594,
              45.02803203993331,
              48.14194713189152,
              46.66295803153477,
              44.55392052399833,
              42.808908006818484,
              40.494936139544706,
              40.36875645037525,
              38.215983412242586,
              40.196674929728196,
              41.17950310441529,
              39.70452820667144,
              44.1582122624641,
              44.74209500345477,
              47.84215295550629,
              46.38142527595057,
              44.290649189215145,
              42.58212398701258,
              40.30463943471608,
              40.234134076560146,
              38.137035369441,
              40.201258512568664,
              41.267618312897795,
              39.90202094362488,
              44.46508252788849,
              45.121130621729684,
              48.29335392663175,
              46.86600247868348,
              44.80860262355551,
              43.100436842068284,
              40.82331171048711,
              40.721488727623544,
              38.593072395796774,
              40.59296356733645,
              41.5949913960776,
              40.14737723985825,
              44.62842203717541,
              45.227441072669045,
              48.34263531922354,
              46.86584195501521,
              44.759000183627194,
              43.01824798178317,
              40.70853642984521,
              40.59527431343106,
              38.45541884805371,
              40.46164042329852
            ],
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "isAnomaly": {
            "type": "array",
            "description": "IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.",
            "example": [
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false
            ],
            "items": {
              "type": "boolean"
            }
          },
          "isNegativeAnomaly": {
            "type": "array",
            "description": "IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.",
            "example": [
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false
            ],
            "items": {
              "type": "boolean"
            }
          },
          "isPositiveAnomaly": {
            "type": "array",
            "description": "IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.",
            "example": [
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false
            ],
            "items": {
              "type": "boolean"
            }
          }
        },
        "example": {
          "isNegativeAnomaly": [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "expectedValues": [
            827.7940908243968,
            798.9133774671927,
            888.6058431807189,
            900.5606407986661,
            962.8389426378304,
            933.2591606306954,
            891.0784104799666,
            856.1781601363697,
            809.8987227908941,
            807.375129007505,
            764.3196682448518,
            803.933498594564,
            823.5900620883058,
            794.0905641334288,
            883.164245249282,
            894.8419000690953,
            956.8430591101258,
            927.6285055190114,
            885.812983784303,
            851.6424797402517,
            806.0927886943216,
            804.6826815312029,
            762.74070738882,
            804.0251702513732,
            825.3523662579559,
            798.0404188724976,
            889.3016505577698,
            902.4226124345937,
            965.867078532635,
            937.3200495736695,
            896.1720524711102,
            862.0087368413656,
            816.4662342097423,
            814.4297745524709,
            771.8614479159354,
            811.859271346729,
            831.8998279215521,
            802.947544797165,
            892.5684407435083,
            904.5488214533809,
            966.8527063844707,
            937.3168391003043,
            895.180003672544,
            860.3649596356635,
            814.1707285969043,
            811.9054862686213,
            769.1083769610742,
            809.2328084659704
          ],
          "isPositiveAnomaly": [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ],
          "lowerMargins": [
            41.389704541219835,
            39.94566887335964,
            44.43029215903594,
            45.02803203993331,
            48.14194713189152,
            46.66295803153477,
            44.55392052399833,
            42.808908006818484,
            40.494936139544706,
            40.36875645037525,
            38.215983412242586,
            40.196674929728196,
            41.17950310441529,
            39.70452820667144,
            44.1582122624641,
            44.74209500345477,
            47.84215295550629,
            46.38142527595057,
            44.290649189215145,
            42.58212398701258,
            40.30463943471608,
            40.234134076560146,
            38.137035369441,
            40.201258512568664,
            41.267618312897795,
            39.90202094362488,
            44.46508252788849,
            45.121130621729684,
            48.29335392663175,
            46.86600247868348,
            44.80860262355551,
            43.100436842068284,
            40.82331171048711,
            40.721488727623544,
            38.593072395796774,
            40.59296356733645,
            41.5949913960776,
            40.14737723985825,
            44.62842203717541,
            45.227441072669045,
            48.34263531922354,
            46.86584195501521,
            44.759000183627194,
            43.01824798178317,
            40.70853642984521,
            40.59527431343106,
            38.45541884805371,
            40.46164042329852
          ],
          "period": 12,
          "upperMargins": [
            41.389704541219835,
            39.94566887335964,
            44.43029215903594,
            45.02803203993331,
            48.14194713189152,
            46.66295803153477,
            44.55392052399833,
            42.808908006818484,
            40.494936139544706,
            40.36875645037525,
            38.215983412242586,
            40.196674929728196,
            41.17950310441529,
            39.70452820667144,
            44.1582122624641,
            44.74209500345477,
            47.84215295550629,
            46.38142527595057,
            44.290649189215145,
            42.58212398701258,
            40.30463943471608,
            40.234134076560146,
            38.137035369441,
            40.201258512568664,
            41.267618312897795,
            39.90202094362488,
            44.46508252788849,
            45.121130621729684,
            48.29335392663175,
            46.86600247868348,
            44.80860262355551,
            43.100436842068284,
            40.82331171048711,
            40.721488727623544,
            38.593072395796774,
            40.59296356733645,
            41.5949913960776,
            40.14737723985825,
            44.62842203717541,
            45.227441072669045,
            48.34263531922354,
            46.86584195501521,
            44.759000183627194,
            43.01824798178317,
            40.70853642984521,
            40.59527431343106,
            38.45541884805371,
            40.46164042329852
          ],
          "isAnomaly": [
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false,
            false
          ]
        }
      },
      "LastDetectResponse": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found.",
            "format": "int32",
            "example": 12
          },
          "suggestedWindow": {
            "type": "integer",
            "description": "Suggested input series points needed for detecting the latest point.",
            "format": "int32",
            "example": 49
          },
          "expectedValue": {
            "type": "number",
            "description": "Expected value of the latest point.",
            "format": "float",
            "example": 809.2328
          },
          "upperMargin": {
            "type": "number",
            "description": "Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed.",
            "format": "float",
            "example": 40.46164
          },
          "lowerMargin": {
            "type": "number",
            "description": "Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. ",
            "format": "float",
            "example": 40.46164
          },
          "isAnomaly": {
            "type": "boolean",
            "description": "Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.",
            "example": false
          },
          "isNegativeAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.",
            "example": false
          },
          "isPositiveAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.",
            "example": false
          }
        },
        "example": {
          "suggestedWindow": 49,
          "isNegativeAnomaly": false,
          "lowerMargin": 40.46164,
          "isPositiveAnomaly": false,
          "period": 12,
          "expectedValue": 809.2328,
          "isAnomaly": false,
          "upperMargin": 40.46164
        }
      },
      "ChangePointDetectRequest": {
        "required": [
          "granularity",
          "series"
        ],
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "description": "Time series data points. Points should be sorted by timestamp in ascending order to match the change point detection result.",
            "items": {
              "$ref": "#/components/schemas/Point"
            }
          },
          "granularity": {
            "type": "string",
            "description": "Can only be one of yearly, monthly, weekly, daily, hourly, minutely or secondly. Granularity is used for verify whether input series is valid.",
            "example": "daily"
          },
          "customInterval": {
            "type": "integer",
            "description": "Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.",
            "example": 1
          },
          "period": {
            "type": "integer",
            "description": "Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.",
            "format": "int32",
            "example": 0
          },
          "stableTrendWindow": {
            "type": "integer",
            "description": "Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection.",
            "format": "int32",
            "example": 7
          },
          "threshold": {
            "type": "number",
            "description": "Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is, the larger the trend error will be which means less change point will be accepted.",
            "format": "float",
            "example": 0.9
          }
        },
        "example": "{\r\n    \"series\": [{\r\n            \"value\": 116168307,\r\n            \"timestamp\": \"2019-01-01T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116195090,\r\n            \"timestamp\": \"2019-01-02T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116219292,\r\n            \"timestamp\": \"2019-01-03T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116218498,\r\n            \"timestamp\": \"2019-01-04T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116217643,\r\n            \"timestamp\": \"2019-01-05T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116234219,\r\n            \"timestamp\": \"2019-01-06T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116291400,\r\n            \"timestamp\": \"2019-01-07T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116326509,\r\n            \"timestamp\": \"2019-01-08T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116323167,\r\n            \"timestamp\": \"2019-01-09T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116360790,\r\n            \"timestamp\": \"2019-01-10T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116367491,\r\n            \"timestamp\": \"2019-01-11T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116371082,\r\n            \"timestamp\": \"2019-01-12T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116380405,\r\n            \"timestamp\": \"2019-01-13T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116393919,\r\n            \"timestamp\": \"2019-01-14T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116443750,\r\n            \"timestamp\": \"2019-01-15T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116467267,\r\n            \"timestamp\": \"2019-01-16T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116497910,\r\n            \"timestamp\": \"2019-01-17T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116499861,\r\n            \"timestamp\": \"2019-01-18T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116500538,\r\n            \"timestamp\": \"2019-01-19T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116532052,\r\n            \"timestamp\": \"2019-01-20T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116559282,\r\n            \"timestamp\": \"2019-01-21T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 116597249,\r\n            \"timestamp\": \"2019-01-22T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118036892,\r\n            \"timestamp\": \"2019-01-23T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118090207,\r\n            \"timestamp\": \"2019-01-24T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118105517,\r\n            \"timestamp\": \"2019-01-25T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118107624,\r\n            \"timestamp\": \"2019-01-26T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118138073,\r\n            \"timestamp\": \"2019-01-27T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118164752,\r\n            \"timestamp\": \"2019-01-28T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118150854,\r\n            \"timestamp\": \"2019-01-29T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118168111,\r\n            \"timestamp\": \"2019-01-30T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118281715,\r\n            \"timestamp\": \"2019-01-31T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118255480,\r\n            \"timestamp\": \"2019-02-01T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118256700,\r\n            \"timestamp\": \"2019-02-02T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118256692,\r\n            \"timestamp\": \"2019-02-03T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118261555,\r\n            \"timestamp\": \"2019-02-04T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118271556,\r\n            \"timestamp\": \"2019-02-05T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118304847,\r\n            \"timestamp\": \"2019-02-06T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119575122,\r\n            \"timestamp\": \"2019-02-07T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119575288,\r\n            \"timestamp\": \"2019-02-08T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119577225,\r\n            \"timestamp\": \"2019-02-09T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119687273,\r\n            \"timestamp\": \"2019-02-10T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119696443,\r\n            \"timestamp\": \"2019-02-11T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119708919,\r\n            \"timestamp\": \"2019-02-12T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119742399,\r\n            \"timestamp\": \"2019-02-13T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119783758,\r\n            \"timestamp\": \"2019-02-14T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119778552,\r\n            \"timestamp\": \"2019-02-15T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119777165,\r\n            \"timestamp\": \"2019-02-16T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 119839611,\r\n            \"timestamp\": \"2019-02-17T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118478044,\r\n            \"timestamp\": \"2019-02-18T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118510659,\r\n            \"timestamp\": \"2019-02-19T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 118536890,\r\n            \"timestamp\": \"2019-02-20T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120377808,\r\n            \"timestamp\": \"2019-02-21T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120379137,\r\n            \"timestamp\": \"2019-02-22T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120380093,\r\n            \"timestamp\": \"2019-02-23T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120409909,\r\n            \"timestamp\": \"2019-02-24T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120481097,\r\n            \"timestamp\": \"2019-02-25T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120525030,\r\n            \"timestamp\": \"2019-02-26T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120554993,\r\n            \"timestamp\": \"2019-02-27T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120396587,\r\n            \"timestamp\": \"2019-02-28T00:00:00Z\"\r\n        },\r\n        {\r\n            \"value\": 120389070,\r\n            \"timestamp\": \"2019-03-01T00:00:00Z\"\r\n        }\r\n    ],\r\n    \"granularity\": \"daily\",\r\n    \"customInterval\": 1,\r\n    \"stableTrendWindow\": 5,\r\n    \"threshold\": 0.9,\r\n    \"period\": 0\r\n}"
      },
      "ChangePointDetectResponse": {
        "required": [
          "confidenceScores",
          "isChangePoint",
          "period"
        ],
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found.",
            "format": "int32",
            "example": 0
          },
          "isChangePoint": {
            "type": "array",
            "description": "isChangePoint contains change point properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.",
            "example": [
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false
            ],
            "items": {
              "type": "boolean",
              "nullable": false
            }
          },
          "confidenceScores": {
            "type": "array",
            "description": "the change point confidence of each point",
            "example": [
              0,
              0,
              0.00009806187784391992,
              0.0018271196069162686,
              0.0024024970102579477,
              0.0006698841513929579,
              0.005241021191331318,
              0.005608371938773833,
              0.0002582967339394681,
              0.0028641957214850305,
              0.0002086271545768578,
              0.002872596645208636,
              0.0038254365621415275,
              0.0037871087975867787,
              0.002551692781278267,
              0.002795581501682331,
              0.004242681998535293,
              0.0001668205733865953,
              0.0033500664222602655,
              0.0004736963490890601,
              0.0010909427701544395,
              0.004416975679466235,
              0.32811393206802303,
              3.3969062736306306e-15,
              0.0014439526026416374,
              0.0026356798731345843,
              0.00035229328015416554,
              0.0003425625371251363,
              0.004252803662198847,
              0.0026723666415576523,
              0.01203658322275258,
              0.0005797791524039205,
              0.002973159734217919,
              0.00563771188428345,
              0.006702942334305688,
              0.006560331486165724,
              0.0023713364333307675,
              0.28312612517142904,
              3.3969062736306306e-15,
              0.00006728693748012286,
              0.007474321161820017,
              0.0007402854911579185,
              0.0021427717111760516,
              0.0010456722259841228,
              0.0006710836684717039,
              0.004880561063393699,
              0.007855787427509102,
              0.00015617505084218866,
              0.2230962081216851,
              3.3969062736306306e-15,
              0.00024255212249064555,
              0.11668400494338521,
              6.793812547261261e-15,
              0.000014171670068597315,
              0.0019566935039425576,
              0.006387099509754672,
              0.005234041196046256,
              0.002723346117254897,
              0.02386583326609911,
              0.01847725899081154
            ],
            "items": {
              "type": "number",
              "format": "float",
              "nullable": false
            }
          }
        }
      },
      "LastResponse": {
        "properties": {
          "period": {
            "type": "integer",
            "description": "Frequency extracted from the series, zero means no recurrent pattern has been found.",
            "format": "int32",
            "example": 12
          },
          "suggestedWindow": {
            "type": "integer",
            "description": "Suggested input series points needed for detecting the latest point.",
            "format": "int32",
            "example": 49
          },
          "expectedValue": {
            "type": "number",
            "description": "Expected value of the latest point.",
            "format": "float",
            "example": 809.2328
          },
          "upperMargin": {
            "type": "number",
            "description": "Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed.",
            "format": "float",
            "example": 40.46164
          },
          "lowerMargin": {
            "type": "number",
            "description": "Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. ",
            "format": "float",
            "example": 40.46164
          },
          "isAnomaly": {
            "type": "boolean",
            "description": "Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.",
            "example": false
          },
          "isNegativeAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.",
            "example": false
          },
          "isPositiveAnomaly": {
            "type": "boolean",
            "description": "Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.",
            "example": false
          }
        },
        "example": {
          "suggestedWindow": 49,
          "isNegativeAnomaly": false,
          "lowerMargin": 40.46164,
          "isPositiveAnomaly": false,
          "period": 12,
          "expectedValue": 809.2328,
          "isAnomaly": false,
          "upperMargin": 40.46164
        }
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header",
        "description": "Represents API Key `Ocp-Apim-Subscription-Key`"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query",
        "description": "Represents API Key `subscription-key`"
      }
    }
  }
}