/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - AI Package Ballerina Generator'

def packageName = "ai"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    langVersion = ballerinaLangVersion
    platform = "java21"
}

configurations {
    externalJars
}

dependencies {
    externalJars project(":ai-native")
    
    externalJars(group: 'dev.langchain4j', name: 'langchain4j', version:  "${project.langchain4jVersion}") {
        transitive = false
    }
    externalJars(group: 'dev.langchain4j', name: 'langchain4j-core', version:  "${project.langchain4jVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.opennlp', name: 'opennlp-tools', version: "${project.openNlpToolsVersion}") {
        transitive = false
    }
    
    // Tika dependencies
    externalJars(group: 'org.apache.tika', name: 'tika-core', version: "${project.tikaVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.tika', name: 'tika-parser-pdf-module', version: "${project.tikaVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.tika', name: 'tika-parser-microsoft-module', version: "${project.tikaVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.tika', name: 'tika-parser-zip-commons', version: "${project.tikaVersion}") {
        transitive = false
    }
    
    // POI dependencies  
    externalJars(group: 'org.apache.poi', name: 'poi', version: "${project.poiVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.poi', name: 'poi-scratchpad', version: "${project.poiVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.poi', name: 'poi-ooxml', version: "${project.poiVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.poi', name: 'poi-ooxml-lite', version: "${project.poiVersion}") {
        transitive = false
    }
    
    // PDF processing dependencies
    externalJars(group: 'org.apache.pdfbox', name: 'pdfbox', version: "${project.pdfboxVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.pdfbox', name: 'fontbox', version: "${project.pdfboxVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.pdfbox', name: 'jempbox', version: "${project.jempboxVersion}") {
        transitive = false
    }
    
    // Commons dependencies (tika)
    externalJars(group: 'commons-io', name: 'commons-io', version: "${project.commonsIoVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.commons', name: 'commons-compress', version: "${project.commonsCompressVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.commons', name: 'commons-collections4', version: "${project.commonsCollections4Version}") {
        transitive = false
    }
    
    // Minimal logging (required by tika-parser-microsoft-module)
    externalJars(group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${project.log4jVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${project.log4jVersion}") {
        transitive = false
    }
    
    // XMLBeans (required by POI OOXML)
    externalJars(group: 'org.apache.xmlbeans', name: 'xmlbeans', version: "${project.xmlbeansVersion}") {
        transitive = false
    }
    
    // SparseBitSet (required by POI PPTX)
    externalJars(group: 'com.zaxxer', name: 'SparseBitSet', version: "${project.sparseBitSetVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@langchain4j.version", project.langchain4jVersion)
        newConfig = newConfig.replace("@openNlpTools.version", project.openNlpToolsVersion)
        newConfig = newConfig.replace("@tikaVersion@", project.tikaVersion)
        newConfig = newConfig.replace("@poiVersion@", project.poiVersion)
        newConfig = newConfig.replace("@pdfboxVersion@", project.pdfboxVersion)
        newConfig = newConfig.replace("@jempboxVersion@", project.jempboxVersion)
        newConfig = newConfig.replace("@commonsIoVersion@", project.commonsIoVersion)
        newConfig = newConfig.replace("@commonsCompressVersion@", project.commonsCompressVersion)
        newConfig = newConfig.replace("@commonsCollections4Version@", project.commonsCollections4Version)
        newConfig = newConfig.replace("@log4jVersion@", project.log4jVersion)
        newConfig = newConfig.replace("@xmlbeansVersion@", project.xmlbeansVersion)
        newConfig = newConfig.replace("@sparseBitSetVersion@", project.sparseBitSetVersion)
        ballerinaTomlFile.text = newConfig

        def ballerinaToOpenApiVersion = project.ballerinaToOpenApiVersion
        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newCompilerPluginToml = newCompilerPluginToml.replace("@ballerinaToOpenApiVersion.version@", ballerinaToOpenApiVersion)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

task buildMcpServer(type: Exec) {
    workingDir "$project.projectDir/tests/resources/mcp-server"
    commandLine 'docker', 'build', '-t', 'mcp-server', '.'
}

task startMcpServer(type: Exec) {
    commandLine 'docker', 'run', '-d', '-p', '3000:3000', 'mcp-server'
}

task stopMcpServer(type: Exec) {
    commandLine 'sh', '-c', 'docker stop $(docker ps -q --filter ancestor=mcp-server)'
}

boolean isMcpDisabled(String feature) {
    return project.findProperty('disable')?.split(',')?.contains("mcp")
}

if (!project.gradle.startParameter.excludedTaskNames.contains('test') && !Os.isFamily(Os.FAMILY_WINDOWS) && !isMcpDisabled('mcp')) {
    build.dependsOn buildMcpServer
    build.dependsOn startMcpServer
    test.dependsOn buildMcpServer
    test.dependsOn startMcpServer
    build.finalizedBy stopMcpServer
    test.finalizedBy stopMcpServer
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-compiler-plugin:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build
