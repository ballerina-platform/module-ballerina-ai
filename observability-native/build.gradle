/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'com.github.spotbugs'
    id 'checkstyle'
    id 'com.gradleup.shadow' version '9.1.0'
}

description = 'Ballerina - AI package Observability Java Utils'

dependencies {

    implementation group: 'org.graalvm.polyglot', name: 'polyglot', version: '24.2.2'
    implementation group: 'org.graalvm.polyglot', name: 'python', version: '24.2.2'

    // Force BouncyCastle version to match ballerina/crypto
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.80'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.80'
    implementation group: 'org.bouncycastle', name: 'bcutil-jdk18on', version: '1.80'

    checkstyle project(":checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0'
}

spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    ignoreFailures = true
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion '7.8.2'
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.graalvm.polyglot'
        ]
        classpath = files()
    }
}

compileTestJava {
    // Disable module system for tests to allow same package access to package-private classes
}

task startPhoenix {
    doLast {
        println "Checking if Phoenix container is already running..."

        // Check if Phoenix is already running by testing the health endpoint
        def phoenixReady = false
        try {
            def result = exec {
                commandLine "curl", "-f", "-s", "http://localhost:6006/healthz"
                ignoreExitValue = true
            }
            if (result.exitValue == 0) {
                phoenixReady = true
                println "Phoenix container is already running and ready!"
            }
        } catch (Exception e) {
            // Phoenix is not running, continue with startup
        }

        if (!phoenixReady) {
            println "Starting Phoenix container..."
            def phoenixContainer = "phoenix-${project.name}-${System.currentTimeMillis()}"

            // Stop any existing Phoenix container
            exec {
                commandLine "docker", "stop", phoenixContainer
                ignoreExitValue = true
            }
            exec {
                commandLine "docker", "rm", phoenixContainer
                ignoreExitValue = true
            }

            // Start new Phoenix container
            exec {
                commandLine "docker", "run", "-d",
                        "--name", phoenixContainer,
                        "-p", "6006:6006",
                        "-p", "4317:4317",
                        "-p", "9090:9090",
                        "arizephoenix/phoenix:latest"
            }

            // Wait for Phoenix to be ready
            println "Waiting for Phoenix to start..."
            def maxWaitTime = 120 // seconds
            def waitTime = 0
            phoenixReady = false

            while (waitTime < maxWaitTime && !phoenixReady) {
                try {
                    def result = exec {
                        commandLine "curl", "-f", "-s", "http://localhost:6006/healthz"
                        ignoreExitValue = true
                    }
                    if (result.exitValue == 0) {
                        phoenixReady = true
                        println "Phoenix is ready!"
                    } else {
                        println "Waiting for Phoenix... (${waitTime}s)"
                        Thread.sleep(5000)
                        waitTime += 5
                    }
                } catch (Exception e) {
                    println "Waiting for Phoenix... (${waitTime}s) - ${e.message}"
                    Thread.sleep(5000)
                    waitTime += 5
                }
            }

            if (!phoenixReady) {
                throw new GradleException("Phoenix failed to start within ${maxWaitTime} seconds")
            }

            // Store container name for cleanup
            project.ext.phoenixContainer = phoenixContainer
        }
    }
}

task stopPhoenix {
    doLast {
        if (project.hasProperty('phoenixContainer')) {
            println "Stopping Phoenix container: ${project.phoenixContainer}"
            exec {
                commandLine "docker", "stop", project.phoenixContainer
                ignoreExitValue = true
            }
            exec {
                commandLine "docker", "rm", project.phoenixContainer
                ignoreExitValue = true
            }
        }
    }
}

test {
    dependsOn startPhoenix
    finalizedBy stopPhoenix
    useTestNG()
    testLogging {
        exceptionFormat = "full"
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

shadowJar {
    archiveBaseName = 'observability-native'
    archiveClassifier = ''
    archiveVersion = "${project.version}"
    from sourceSets.main.output
    from sourceSets.main.resources
    configurations = [project.configurations.runtimeClasspath]

    // Exclude module-info.class to avoid conflicts
    exclude 'META-INF/versions/*/module-info.class'
    exclude 'module-info.class'

    // Enable zip64 for large archives with many files
    zip64 = true

    // Merge service files to avoid conflicts
    mergeServiceFiles()
}

