/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
    id 'checkstyle'
    id 'org.graalvm.python' version '24.2.2'
}

repositories {
    mavenCentral()
}

description = 'Ballerina - AI Observability Native Utils'

dependencies {
    implementation group: 'org.graalvm.polyglot', name: 'polyglot', version: '24.2.2'
    implementation group: 'org.graalvm.polyglot', name: 'python', version: '24.2.2'

    checkstyle "com.puppycrawl.tools:checkstyle:10.12.0"

    testImplementation group: 'org.testng', name: 'testng', version: '7.6.1'
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0'
}

spotbugsMain {
    ignoreFailures = true
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

checkstyle {
    toolVersion '10.12.0'
    configFile file('checkstyle.xml')
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'org.graalvm.polyglot,org.graalvm.python.embedding'
        ]
        classpath = files()
    }
}

compileTestJava {
    // Disable module system for tests to allow same package access to package-private classes
}

task startPhoenix {
    doLast {
        println "Checking if Phoenix container is already running..."

        // Check if Phoenix is already running by testing the health endpoint
        def phoenixReady = false
        try {
            def result = exec {
                commandLine "curl", "-f", "-s", "http://localhost:6006/healthz"
                ignoreExitValue = true
            }
            if (result.exitValue == 0) {
                phoenixReady = true
                println "Phoenix container is already running and ready!"
            }
        } catch (Exception e) {
            // Phoenix is not running, continue with startup
        }

        if (!phoenixReady) {
            println "Starting Phoenix container..."
            def phoenixContainer = "phoenix-${project.name}-${System.currentTimeMillis()}"

            // Stop any existing Phoenix container
            exec {
                commandLine "docker", "stop", phoenixContainer
                ignoreExitValue = true
            }
            exec {
                commandLine "docker", "rm", phoenixContainer
                ignoreExitValue = true
            }

            // Start new Phoenix container
            exec {
                commandLine "docker", "run", "-d",
                    "--name", phoenixContainer,
                    "-p", "6006:6006",
                    "-p", "4317:4317",
                    "-p", "9090:9090",
                    "arizephoenix/phoenix:latest"
            }

            // Wait for Phoenix to be ready
            println "Waiting for Phoenix to start..."
            def maxWaitTime = 120 // seconds
            def waitTime = 0
            phoenixReady = false

            while (waitTime < maxWaitTime && !phoenixReady) {
                try {
                    def result = exec {
                        commandLine "curl", "-f", "-s", "http://localhost:6006/healthz"
                        ignoreExitValue = true
                    }
                    if (result.exitValue == 0) {
                        phoenixReady = true
                        println "Phoenix is ready!"
                    } else {
                        println "Waiting for Phoenix... (${waitTime}s)"
                        Thread.sleep(5000)
                        waitTime += 5
                    }
                } catch (Exception e) {
                    println "Waiting for Phoenix... (${waitTime}s) - ${e.message}"
                    Thread.sleep(5000)
                    waitTime += 5
                }
            }

            if (!phoenixReady) {
                throw new GradleException("Phoenix failed to start within ${maxWaitTime} seconds")
            }

            // Store container name for cleanup
            project.ext.phoenixContainer = phoenixContainer
        }
    }
}

task stopPhoenix {
    doLast {
        if (project.hasProperty('phoenixContainer')) {
            println "Stopping Phoenix container: ${project.phoenixContainer}"
            exec {
                commandLine "docker", "stop", project.phoenixContainer
                ignoreExitValue = true
            }
            exec {
                commandLine "docker", "rm", project.phoenixContainer
                ignoreExitValue = true
            }
        }
    }
}

test {
    dependsOn startPhoenix
    finalizedBy stopPhoenix

    useTestNG()
    testLogging {
        exceptionFormat = "full"
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

// Create standard thin jar with platform-specific classifier
jar {
    // Include platform-specific classifier
    archiveClassifier = getOsClassifier()

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

def getOsClassifier() {
    def osName = System.getProperty("os.name").toLowerCase()
    def osArch = System.getProperty("os.arch").toLowerCase()

    if (osName.contains("mac") || osName.contains("darwin")) {
        return "darwin-${osArch}"
    } else if (osName.contains("linux")) {
        return "linux-${osArch}"
    }
    return "unknown"
}

task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

graalPy {
    packages = ["arize-phoenix-otel==${arizePhoenixOtelVersion}", "grpcio==${grpcioVersion}"]
}
