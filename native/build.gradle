/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'com.github.spotbugs'
    id 'checkstyle'
    id("org.graalvm.python") version "${polyglotVersion}"
}

description = 'Ballerina - AI package Java Utils'

dependencies {
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'value', version: "${ballerinaLangVersion}"
    implementation group: 'dev.langchain4j', name: 'langchain4j', version: "${langchain4jVersion}"
    implementation group: 'dev.langchain4j', name: 'langchain4j-core', version: "${langchain4jVersion}"
    implementation group: 'org.apache.opennlp', name: 'opennlp-tools', version: "${openNlpToolsVersion}"

    implementation group: 'org.apache.tika', name: 'tika-core', version: "${tikaVersion}", {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xerces', module: 'xercesImpl'
    }
    implementation group: 'org.apache.tika', name: 'tika-parser-pdf-module', version: "${tikaVersion}", {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xerces', module: 'xercesImpl'
        exclude group: 'org.bouncycastle', module: 'bcmail-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcutil-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcpkix-jdk18on'
    }
    implementation group: 'org.apache.tika', name: 'tika-parser-microsoft-module', version: "${tikaVersion}", {
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xerces', module: 'xercesImpl'
        exclude group: 'org.bouncycastle', module: 'bcmail-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcutil-jdk18on'
        exclude group: 'org.bouncycastle', module: 'bcpkix-jdk18on'
        exclude group: 'com.healthmarketscience.jackcess', module: 'jackcess-encrypt'
    }


    implementation group: 'org.graalvm.polyglot', name: 'polyglot', version: "${polyglotVersion}"
    implementation group: 'org.graalvm.polyglot', name: 'python', version: "${polyglotVersion}"

    checkstyle project(":checkstyle")
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.testng', name: 'testng', version: "${testngVersion}"
}

spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    ignoreFailures = true
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/build-config/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        text.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

task validateSpotbugs() {
    doLast {
        if (spotbugsMain.reports.size() > 0 &&
                spotbugsMain.reports[0].destination.exists() &&
                spotbugsMain.reports[0].destination.text.readLines().size() > 0) {
            spotbugsMain.reports[0].destination?.eachLine {
                println 'Failure: ' + it
            }
            throw new GradleException("Spotbugs rule violations were found.");
        }
    }
}

checkstyle {
    toolVersion '7.8.2'
    configFile file("${rootDir}/build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile": file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.withType(Checkstyle) {
    exclude '**/module-info.java'
    exclude '**/MarkdownChunker.java'
}

spotbugsMain.finalizedBy validateSpotbugs
checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    // Disable module system for tests to allow same package access to package-private classes
}

task startPhoenix {
    doLast {
        println "Starting Phoenix container..."
        def phoenixContainer = "phoenix-${project.name}-${System.currentTimeMillis()}"

        // Stop any existing Phoenix container
        exec {
            commandLine "docker", "stop", phoenixContainer
            ignoreExitValue = true
        }
        exec {
            commandLine "docker", "rm", phoenixContainer
            ignoreExitValue = true
        }

        // Start new Phoenix container
        exec {
            commandLine "docker", "run", "-d",
                "--name", phoenixContainer,
                "-p", "6006:6006",
                "-p", "4317:4317",
                "-p", "9090:9090",
                "arizephoenix/phoenix:latest"
        }

        // Wait for Phoenix to be ready
        println "Waiting for Phoenix to start..."
        def maxWaitTime = 120 // seconds
        def waitTime = 0
        def phoenixReady = false

        while (waitTime < maxWaitTime && !phoenixReady) {
            try {
                def result = exec {
                    commandLine "curl", "-f", "-s", "http://localhost:6006/healthz"
                    ignoreExitValue = true
                }
                if (result.exitValue == 0) {
                    phoenixReady = true
                    println "Phoenix is ready!"
                } else {
                    println "Waiting for Phoenix... (${waitTime}s)"
                    Thread.sleep(5000)
                    waitTime += 5
                }
            } catch (Exception e) {
                println "Waiting for Phoenix... (${waitTime}s) - ${e.message}"
                Thread.sleep(5000)
                waitTime += 5
            }
        }

        if (!phoenixReady) {
            throw new GradleException("Phoenix failed to start within ${maxWaitTime} seconds")
        }

        // Store container name for cleanup
        project.ext.phoenixContainer = phoenixContainer
    }
}

task stopPhoenix {
    doLast {
        if (project.hasProperty('phoenixContainer')) {
            println "Stopping Phoenix container: ${project.phoenixContainer}"
            exec {
                commandLine "docker", "stop", project.phoenixContainer
                ignoreExitValue = true
            }
            exec {
                commandLine "docker", "rm", project.phoenixContainer
                ignoreExitValue = true
            }
        }
    }
}

test {
    dependsOn startPhoenix
    finalizedBy stopPhoenix

    useTestNG()
    testLogging {
        exceptionFormat = "full"
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

graalPy {
    packages = ["arize-phoenix-otel==${arizePhoenixOtelVersion}", "grpcio==${grpcioVersion}"]
}

